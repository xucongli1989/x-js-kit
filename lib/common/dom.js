"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendElementToLimitContainer = appendElementToLimitContainer;

/**
 * 在指定容器的开头或末尾追加一个子元素，并且限制此容器内的子元素的最大数量。如果超出最大数量，则显示一个占位元素
 * 应用场景：一个 div 需要实时显示无数条日志，每条日志占用一行，当日志过多时，限制显示的数量，并展示一个【更多】按钮供用户单击查看完整日志
 * @param containerElement 外层容器
 * @param subElement 子元素
 * @param maxCount 最大子元素数量
 * @param ellipsisElement 当子元素超过最大数量时，显示一个省略占位元素，如：<p>...</p>
 * @param isInsertToStart 是否将子元素追加到容器的开头
 */
function appendElementToLimitContainer(containerElement, subElement, maxCount, ellipsisElement, isInsertToStart) {
  var result = {};
  result.isOverflow = false;

  if (!containerElement || !subElement) {
    return result;
  }

  var conEle = containerElement;

  if (isInsertToStart && conEle.firstChild) {
    conEle.insertBefore(subElement, conEle.firstChild);
  } else {
    conEle.appendChild(subElement);
  } //超出范围


  if (conEle._x_js_kit_limit_edge_index > 0) {
    if (!conEle._x_js_kit_limit_inserted_ellipsis) {
      conEle.insertBefore(ellipsisElement, conEle.childNodes[isInsertToStart ? conEle._x_js_kit_limit_edge_index + 1 : conEle._x_js_kit_limit_edge_index]);
      conEle._x_js_kit_limit_inserted_ellipsis = true;
    }

    conEle.removeChild(conEle.childNodes[isInsertToStart ? conEle._x_js_kit_limit_edge_index : conEle._x_js_kit_limit_edge_index + 1]);
    result.isOverflow = true;
    return result;
  } //正常范围


  var childLength = containerElement.childNodes.length;

  if (childLength == maxCount) {
    conEle._x_js_kit_limit_edge_index = Math.ceil(childLength / 2);
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vZG9tLnRzIl0sIm5hbWVzIjpbImFwcGVuZEVsZW1lbnRUb0xpbWl0Q29udGFpbmVyIiwiY29udGFpbmVyRWxlbWVudCIsInN1YkVsZW1lbnQiLCJtYXhDb3VudCIsImVsbGlwc2lzRWxlbWVudCIsImlzSW5zZXJ0VG9TdGFydCIsInJlc3VsdCIsImlzT3ZlcmZsb3ciLCJjb25FbGUiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJfeF9qc19raXRfbGltaXRfZWRnZV9pbmRleCIsIl94X2pzX2tpdF9saW1pdF9pbnNlcnRlZF9lbGxpcHNpcyIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImNoaWxkTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsImNlaWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSw2QkFBVCxDQUNIQyxnQkFERyxFQUVIQyxVQUZHLEVBR0hDLFFBSEcsRUFJSEMsZUFKRyxFQUtIQyxlQUxHLEVBTW9DO0FBQ3ZDLE1BQU1DLE1BQU0sR0FBRyxFQUFmO0FBQ0FBLEVBQUFBLE1BQU0sQ0FBQ0MsVUFBUCxHQUFvQixLQUFwQjs7QUFDQSxNQUFJLENBQUNOLGdCQUFELElBQXFCLENBQUNDLFVBQTFCLEVBQXNDO0FBQ2xDLFdBQU9JLE1BQVA7QUFDSDs7QUFDRCxNQUFNRSxNQUFNLEdBQUdQLGdCQUFmOztBQVlBLE1BQUlJLGVBQWUsSUFBSUcsTUFBTSxDQUFDQyxVQUE5QixFQUEwQztBQUN0Q0QsSUFBQUEsTUFBTSxDQUFDRSxZQUFQLENBQW9CUixVQUFwQixFQUFnQ00sTUFBTSxDQUFDQyxVQUF2QztBQUNILEdBRkQsTUFFTztBQUNIRCxJQUFBQSxNQUFNLENBQUNHLFdBQVAsQ0FBbUJULFVBQW5CO0FBQ0gsR0F0QnNDLENBdUJ2Qzs7O0FBQ0EsTUFBSU0sTUFBTSxDQUFDSSwwQkFBUCxHQUFvQyxDQUF4QyxFQUEyQztBQUN2QyxRQUFJLENBQUNKLE1BQU0sQ0FBQ0ssaUNBQVosRUFBK0M7QUFDM0NMLE1BQUFBLE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQk4sZUFBcEIsRUFBcUNJLE1BQU0sQ0FBQ00sVUFBUCxDQUFrQlQsZUFBZSxHQUFHRyxNQUFNLENBQUNJLDBCQUFQLEdBQW9DLENBQXZDLEdBQTJDSixNQUFNLENBQUNJLDBCQUFuRixDQUFyQztBQUNBSixNQUFBQSxNQUFNLENBQUNLLGlDQUFQLEdBQTJDLElBQTNDO0FBQ0g7O0FBQ0RMLElBQUFBLE1BQU0sQ0FBQ08sV0FBUCxDQUFtQlAsTUFBTSxDQUFDTSxVQUFQLENBQWtCVCxlQUFlLEdBQUdHLE1BQU0sQ0FBQ0ksMEJBQVYsR0FBdUNKLE1BQU0sQ0FBQ0ksMEJBQVAsR0FBb0MsQ0FBNUcsQ0FBbkI7QUFDQU4sSUFBQUEsTUFBTSxDQUFDQyxVQUFQLEdBQW9CLElBQXBCO0FBQ0EsV0FBT0QsTUFBUDtBQUNILEdBaENzQyxDQWlDdkM7OztBQUNBLE1BQU1VLFdBQVcsR0FBR2YsZ0JBQWdCLENBQUNhLFVBQWpCLENBQTRCRyxNQUFoRDs7QUFDQSxNQUFJRCxXQUFXLElBQUliLFFBQW5CLEVBQTZCO0FBQ3pCSyxJQUFBQSxNQUFNLENBQUNJLDBCQUFQLEdBQW9DTSxJQUFJLENBQUNDLElBQUwsQ0FBVUgsV0FBVyxHQUFHLENBQXhCLENBQXBDO0FBQ0g7O0FBQ0QsU0FBT1YsTUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBBcHBlbmRFbGVtZW50VG9MaW1pdENvbnRhaW5lclJlc3VsdFR5cGUge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlrZDlhYPntKDmmK/lkKbotoXlh7rmnIDlpKfojIPlm7RcclxuICAgICAqL1xyXG4gICAgaXNPdmVyZmxvdzogYm9vbGVhblxyXG59XHJcblxyXG4vKipcclxuICog5Zyo5oyH5a6a5a655Zmo55qE5byA5aS05oiW5pyr5bC+6L+95Yqg5LiA5Liq5a2Q5YWD57Sg77yM5bm25LiU6ZmQ5Yi25q2k5a655Zmo5YaF55qE5a2Q5YWD57Sg55qE5pyA5aSn5pWw6YeP44CC5aaC5p6c6LaF5Ye65pyA5aSn5pWw6YeP77yM5YiZ5pi+56S65LiA5Liq5Y2g5L2N5YWD57SgXHJcbiAqIOW6lOeUqOWcuuaZr++8muS4gOS4qiBkaXYg6ZyA6KaB5a6e5pe25pi+56S65peg5pWw5p2h5pel5b+X77yM5q+P5p2h5pel5b+X5Y2g55So5LiA6KGM77yM5b2T5pel5b+X6L+H5aSa5pe277yM6ZmQ5Yi25pi+56S655qE5pWw6YeP77yM5bm25bGV56S65LiA5Liq44CQ5pu05aSa44CR5oyJ6ZKu5L6b55So5oi35Y2V5Ye75p+l55yL5a6M5pW05pel5b+XXHJcbiAqIEBwYXJhbSBjb250YWluZXJFbGVtZW50IOWkluWxguWuueWZqFxyXG4gKiBAcGFyYW0gc3ViRWxlbWVudCDlrZDlhYPntKBcclxuICogQHBhcmFtIG1heENvdW50IOacgOWkp+WtkOWFg+e0oOaVsOmHj1xyXG4gKiBAcGFyYW0gZWxsaXBzaXNFbGVtZW50IOW9k+WtkOWFg+e0oOi2hei/h+acgOWkp+aVsOmHj+aXtu+8jOaYvuekuuS4gOS4quecgeeVpeWNoOS9jeWFg+e0oO+8jOWmgu+8mjxwPi4uLjwvcD5cclxuICogQHBhcmFtIGlzSW5zZXJ0VG9TdGFydCDmmK/lkKblsIblrZDlhYPntKDov73liqDliLDlrrnlmajnmoTlvIDlpLRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRFbGVtZW50VG9MaW1pdENvbnRhaW5lcihcclxuICAgIGNvbnRhaW5lckVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgc3ViRWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICBtYXhDb3VudDogbnVtYmVyLFxyXG4gICAgZWxsaXBzaXNFbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgIGlzSW5zZXJ0VG9TdGFydD86IGJvb2xlYW5cclxuKTogQXBwZW5kRWxlbWVudFRvTGltaXRDb250YWluZXJSZXN1bHRUeXBlIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHt9IGFzIEFwcGVuZEVsZW1lbnRUb0xpbWl0Q29udGFpbmVyUmVzdWx0VHlwZVxyXG4gICAgcmVzdWx0LmlzT3ZlcmZsb3cgPSBmYWxzZVxyXG4gICAgaWYgKCFjb250YWluZXJFbGVtZW50IHx8ICFzdWJFbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgfVxyXG4gICAgY29uc3QgY29uRWxlID0gY29udGFpbmVyRWxlbWVudCBhcyBIVE1MRWxlbWVudCAmIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojIPlm7TovrnnlYzlhYPntKBcclxuICAgICAgICAgKi9cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXHJcbiAgICAgICAgX3hfanNfa2l0X2xpbWl0X2VkZ2VfaW5kZXg6IG51bWJlclxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaYr+WQpuW3suaPkuWFpeecgeeVpeWNoOS9jeWFg+e0oFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcclxuICAgICAgICBfeF9qc19raXRfbGltaXRfaW5zZXJ0ZWRfZWxsaXBzaXM6IGJvb2xlYW5cclxuICAgIH1cclxuICAgIGlmIChpc0luc2VydFRvU3RhcnQgJiYgY29uRWxlLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICBjb25FbGUuaW5zZXJ0QmVmb3JlKHN1YkVsZW1lbnQsIGNvbkVsZS5maXJzdENoaWxkKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25FbGUuYXBwZW5kQ2hpbGQoc3ViRWxlbWVudClcclxuICAgIH1cclxuICAgIC8v6LaF5Ye66IyD5Zu0XHJcbiAgICBpZiAoY29uRWxlLl94X2pzX2tpdF9saW1pdF9lZGdlX2luZGV4ID4gMCkge1xyXG4gICAgICAgIGlmICghY29uRWxlLl94X2pzX2tpdF9saW1pdF9pbnNlcnRlZF9lbGxpcHNpcykge1xyXG4gICAgICAgICAgICBjb25FbGUuaW5zZXJ0QmVmb3JlKGVsbGlwc2lzRWxlbWVudCwgY29uRWxlLmNoaWxkTm9kZXNbaXNJbnNlcnRUb1N0YXJ0ID8gY29uRWxlLl94X2pzX2tpdF9saW1pdF9lZGdlX2luZGV4ICsgMSA6IGNvbkVsZS5feF9qc19raXRfbGltaXRfZWRnZV9pbmRleF0pXHJcbiAgICAgICAgICAgIGNvbkVsZS5feF9qc19raXRfbGltaXRfaW5zZXJ0ZWRfZWxsaXBzaXMgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbkVsZS5yZW1vdmVDaGlsZChjb25FbGUuY2hpbGROb2Rlc1tpc0luc2VydFRvU3RhcnQgPyBjb25FbGUuX3hfanNfa2l0X2xpbWl0X2VkZ2VfaW5kZXggOiBjb25FbGUuX3hfanNfa2l0X2xpbWl0X2VkZ2VfaW5kZXggKyAxXSlcclxuICAgICAgICByZXN1bHQuaXNPdmVyZmxvdyA9IHRydWVcclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9XHJcbiAgICAvL+ato+W4uOiMg+WbtFxyXG4gICAgY29uc3QgY2hpbGRMZW5ndGggPSBjb250YWluZXJFbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoXHJcbiAgICBpZiAoY2hpbGRMZW5ndGggPT0gbWF4Q291bnQpIHtcclxuICAgICAgICBjb25FbGUuX3hfanNfa2l0X2xpbWl0X2VkZ2VfaW5kZXggPSBNYXRoLmNlaWwoY2hpbGRMZW5ndGggLyAyKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG59XHJcbiJdfQ==