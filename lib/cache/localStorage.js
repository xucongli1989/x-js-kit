"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalCache = getGlobalCache;
exports.setGlobalCacheName = setGlobalCacheName;
exports.add = add;
exports.get = get;
exports.remove = remove;

var _lib = require("../common/lib");

var globalCacheName = "x-js-kit-localcache";

/**
 * 返回全局缓存对象
 */
function getGlobalCache() {
  var cacheValue = localStorage.getItem(globalCacheName);

  if (!cacheValue) {
    return null;
  }

  return JSON.parse(cacheValue);
}
/**
 * 修改localStorage缓存的默认名称
 */


function setGlobalCacheName(name) {
  var oldValue = localStorage.getItem(globalCacheName);
  localStorage.removeItem(globalCacheName);
  globalCacheName = name;
  localStorage.setItem(globalCacheName, oldValue);
}
/**
 * 添加数据至缓存
 */


function add(key, value) {
  var cache = getGlobalCache();

  if (!cache) {
    return;
  }

  cache.items[key] = value;
  localStorage.setItem(globalCacheName, JSON.stringify(cache));
}
/**
 * 读取指定缓存
 */


function get(key) {
  var cache = getGlobalCache();

  if (!cache) {
    return null;
  }

  var item = cache.items[key];

  if (!item) {
    return null;
  }

  if (item.expire && item.expire < new Date().valueOf()) {
    remove(key);
    return null;
  }

  return item;
}
/**
 * 删除指定缓存
 */


function remove(key) {
  var cache = getGlobalCache();

  if (!cache) {
    return null;
  }

  delete cache.items[key];
  localStorage.setItem(globalCacheName, JSON.stringify(cache));
}

(function () {
  if (!(0, _lib.getLocalStorage)()) {
    return;
  } //设置默认缓存值


  var defaultGlobalLocalStorage = {
    time: new Date().valueOf(),
    items: {}
  };

  if (!localStorage.getItem(globalCacheName)) {
    localStorage.setItem(globalCacheName, JSON.stringify(defaultGlobalLocalStorage));
  } //清理过期缓存


  var ch = getGlobalCache();
  if (!ch) return;
  Object.keys(ch.items).forEach(function (key) {
    var item = ch.items[key];

    if (!item || !item.expire) {
      return;
    }

    if (item.expire < new Date().valueOf()) {
      remove(key);
    }
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYWNoZS9sb2NhbFN0b3JhZ2UudHMiXSwibmFtZXMiOlsiZ2xvYmFsQ2FjaGVOYW1lIiwiZ2V0R2xvYmFsQ2FjaGUiLCJjYWNoZVZhbHVlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInNldEdsb2JhbENhY2hlTmFtZSIsIm5hbWUiLCJvbGRWYWx1ZSIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwiYWRkIiwia2V5IiwidmFsdWUiLCJjYWNoZSIsIml0ZW1zIiwic3RyaW5naWZ5IiwiZ2V0IiwiaXRlbSIsImV4cGlyZSIsIkRhdGUiLCJ2YWx1ZU9mIiwicmVtb3ZlIiwiZGVmYXVsdEdsb2JhbExvY2FsU3RvcmFnZSIsInRpbWUiLCJjaCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBLElBQUlBLGVBQWUsR0FBRyxxQkFBdEI7O0FBdUJBOzs7QUFHTyxTQUFTQyxjQUFULEdBQW9EO0FBQ3ZELE1BQU1DLFVBQVUsR0FBR0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCSixlQUFyQixDQUFuQjs7QUFDQSxNQUFJLENBQUNFLFVBQUwsRUFBaUI7QUFDYixXQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFPRyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osVUFBWCxDQUFQO0FBQ0g7QUFDRDs7Ozs7QUFHTyxTQUFTSyxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBMEM7QUFDN0MsTUFBTUMsUUFBUSxHQUFHTixZQUFZLENBQUNDLE9BQWIsQ0FBcUJKLGVBQXJCLENBQWpCO0FBQ0FHLEVBQUFBLFlBQVksQ0FBQ08sVUFBYixDQUF3QlYsZUFBeEI7QUFDQUEsRUFBQUEsZUFBZSxHQUFHUSxJQUFsQjtBQUNBTCxFQUFBQSxZQUFZLENBQUNRLE9BQWIsQ0FBcUJYLGVBQXJCLEVBQXNDUyxRQUF0QztBQUNIO0FBQ0Q7Ozs7O0FBR08sU0FBU0csR0FBVCxDQUFhQyxHQUFiLEVBQTBCQyxLQUExQixFQUFrRDtBQUNyRCxNQUFNQyxLQUFLLEdBQUdkLGNBQWMsRUFBNUI7O0FBQ0EsTUFBSSxDQUFDYyxLQUFMLEVBQVk7QUFDUjtBQUNIOztBQUNEQSxFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUgsR0FBWixJQUFtQkMsS0FBbkI7QUFDQVgsRUFBQUEsWUFBWSxDQUFDUSxPQUFiLENBQXFCWCxlQUFyQixFQUFzQ0ssSUFBSSxDQUFDWSxTQUFMLENBQWVGLEtBQWYsQ0FBdEM7QUFDSDtBQUNEOzs7OztBQUdPLFNBQVNHLEdBQVQsQ0FBYUwsR0FBYixFQUFrRDtBQUNyRCxNQUFNRSxLQUFLLEdBQUdkLGNBQWMsRUFBNUI7O0FBQ0EsTUFBSSxDQUFDYyxLQUFMLEVBQVk7QUFDUixXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFNSSxJQUFJLEdBQUdKLEtBQUssQ0FBQ0MsS0FBTixDQUFZSCxHQUFaLENBQWI7O0FBQ0EsTUFBSSxDQUFDTSxJQUFMLEVBQVc7QUFDUCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZUQsSUFBSSxDQUFDQyxNQUFMLEdBQWMsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWpDLEVBQXVEO0FBQ25EQyxJQUFBQSxNQUFNLENBQUNWLEdBQUQsQ0FBTjtBQUNBLFdBQU8sSUFBUDtBQUNIOztBQUNELFNBQU9NLElBQVA7QUFDSDtBQUNEOzs7OztBQUdPLFNBQVNJLE1BQVQsQ0FBZ0JWLEdBQWhCLEVBQTZCO0FBQ2hDLE1BQU1FLEtBQUssR0FBR2QsY0FBYyxFQUE1Qjs7QUFDQSxNQUFJLENBQUNjLEtBQUwsRUFBWTtBQUNSLFdBQU8sSUFBUDtBQUNIOztBQUNELFNBQU9BLEtBQUssQ0FBQ0MsS0FBTixDQUFZSCxHQUFaLENBQVA7QUFDQVYsRUFBQUEsWUFBWSxDQUFDUSxPQUFiLENBQXFCWCxlQUFyQixFQUFzQ0ssSUFBSSxDQUFDWSxTQUFMLENBQWVGLEtBQWYsQ0FBdEM7QUFDSDs7QUFFRCxDQUFDLFlBQU07QUFDSCxNQUFJLENBQUMsMkJBQUwsRUFBd0I7QUFDcEI7QUFDSCxHQUhFLENBSUg7OztBQUNBLE1BQU1TLHlCQUEwQyxHQUFHO0FBQy9DQyxJQUFBQSxJQUFJLEVBQUUsSUFBSUosSUFBSixHQUFXQyxPQUFYLEVBRHlDO0FBRS9DTixJQUFBQSxLQUFLLEVBQUU7QUFGd0MsR0FBbkQ7O0FBSUEsTUFBSSxDQUFDYixZQUFZLENBQUNDLE9BQWIsQ0FBcUJKLGVBQXJCLENBQUwsRUFBNEM7QUFDeENHLElBQUFBLFlBQVksQ0FBQ1EsT0FBYixDQUFxQlgsZUFBckIsRUFBc0NLLElBQUksQ0FBQ1ksU0FBTCxDQUFlTyx5QkFBZixDQUF0QztBQUNILEdBWEUsQ0FZSDs7O0FBQ0EsTUFBTUUsRUFBRSxHQUFHekIsY0FBYyxFQUF6QjtBQUNBLE1BQUksQ0FBQ3lCLEVBQUwsRUFBUztBQUNUQyxFQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUYsRUFBRSxDQUFDVixLQUFmLEVBQXNCYSxPQUF0QixDQUE4QixVQUFBaEIsR0FBRyxFQUFJO0FBQ2pDLFFBQU1NLElBQUksR0FBR08sRUFBRSxDQUFDVixLQUFILENBQVNILEdBQVQsQ0FBYjs7QUFDQSxRQUFJLENBQUNNLElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNDLE1BQW5CLEVBQTJCO0FBQ3ZCO0FBQ0g7O0FBQ0QsUUFBSUQsSUFBSSxDQUFDQyxNQUFMLEdBQWMsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWxCLEVBQXdDO0FBQ3BDQyxNQUFBQSxNQUFNLENBQUNWLEdBQUQsQ0FBTjtBQUNIO0FBQ0osR0FSRDtBQVNILENBeEJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL2NvbW1vbi9saWJcIlxyXG5cclxubGV0IGdsb2JhbENhY2hlTmFtZSA9IFwieC1qcy1raXQtbG9jYWxjYWNoZVwiXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEl0ZW1Db250ZW50VHlwZSB7XHJcbiAgICAvKipcclxuICAgICAqIOWFt+S9k+eahOe8k+WtmOWAvFxyXG4gICAgICovXHJcbiAgICB2YWx1ZTogYW55XHJcbiAgICAvKipcclxuICAgICAqIOi/h+acn+aXtumXtO+8jOiLpeS4jeaMh+Wumu+8jOWImeaXoOi/h+acn+aXtumXtO+8iOatpOaXtumXtOS4uu+8muS7jjE5NzDlubQx5pyIMeaXpTDml7Yw5YiGMOenku+8iFVUQ++8jOWNs+WNj+iwg+S4lueVjOaXtu+8ieWIsOivpeaXpeacn+eahOavq+enkuaVsOOAguWmgu+8mm5ldyBEYXRlKCkudmFsdWVPZigp77yJXHJcbiAgICAgKi9cclxuICAgIGV4cGlyZT86IG51bWJlclxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgR2xvYmFsQ2FjaGVUeXBlIHtcclxuICAgIC8qKlxyXG4gICAgICog5pe26Ze0XHJcbiAgICAgKi9cclxuICAgIHRpbWU6IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICog5omA5pyJ57yT5a2Y6aG5XHJcbiAgICAgKi9cclxuICAgIGl0ZW1zOiB7IFtrZXk6IHN0cmluZ106IEl0ZW1Db250ZW50VHlwZSB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDov5Tlm57lhajlsYDnvJPlrZjlr7nosaFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxDYWNoZSgpOiAoR2xvYmFsQ2FjaGVUeXBlIHwgbnVsbCkge1xyXG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGdsb2JhbENhY2hlTmFtZSkgYXMgc3RyaW5nXHJcbiAgICBpZiAoIWNhY2hlVmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBKU09OLnBhcnNlKGNhY2hlVmFsdWUpIGFzIEdsb2JhbENhY2hlVHlwZVxyXG59XHJcbi8qKlxyXG4gKiDkv67mlLlsb2NhbFN0b3JhZ2XnvJPlrZjnmoTpu5jorqTlkI3np7BcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRHbG9iYWxDYWNoZU5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGdsb2JhbENhY2hlTmFtZSkgYXMgc3RyaW5nO1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZ2xvYmFsQ2FjaGVOYW1lKVxyXG4gICAgZ2xvYmFsQ2FjaGVOYW1lID0gbmFtZVxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oZ2xvYmFsQ2FjaGVOYW1lLCBvbGRWYWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIOa3u+WKoOaVsOaNruiHs+e8k+WtmFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChrZXk6IHN0cmluZywgdmFsdWU6IEl0ZW1Db250ZW50VHlwZSkge1xyXG4gICAgY29uc3QgY2FjaGUgPSBnZXRHbG9iYWxDYWNoZSgpXHJcbiAgICBpZiAoIWNhY2hlKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjYWNoZS5pdGVtc1trZXldID0gdmFsdWVcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGdsb2JhbENhY2hlTmFtZSwgSlNPTi5zdHJpbmdpZnkoY2FjaGUpKVxyXG59XHJcbi8qKlxyXG4gKiDor7vlj5bmjIflrprnvJPlrZhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXQoa2V5OiBzdHJpbmcpOiBJdGVtQ29udGVudFR5cGUgfCBudWxsIHtcclxuICAgIGNvbnN0IGNhY2hlID0gZ2V0R2xvYmFsQ2FjaGUoKVxyXG4gICAgaWYgKCFjYWNoZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICBjb25zdCBpdGVtID0gY2FjaGUuaXRlbXNba2V5XVxyXG4gICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICAgIGlmIChpdGVtLmV4cGlyZSAmJiBpdGVtLmV4cGlyZSA8IG5ldyBEYXRlKCkudmFsdWVPZigpKSB7XHJcbiAgICAgICAgcmVtb3ZlKGtleSlcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGl0ZW1cclxufVxyXG4vKipcclxuICog5Yig6Zmk5oyH5a6a57yT5a2YXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGtleTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjYWNoZSA9IGdldEdsb2JhbENhY2hlKClcclxuICAgIGlmICghY2FjaGUpIHtcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gICAgZGVsZXRlIGNhY2hlLml0ZW1zW2tleV1cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGdsb2JhbENhY2hlTmFtZSwgSlNPTi5zdHJpbmdpZnkoY2FjaGUpKVxyXG59XHJcblxyXG4oKCkgPT4ge1xyXG4gICAgaWYgKCFnZXRMb2NhbFN0b3JhZ2UoKSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgLy/orr7nva7pu5jorqTnvJPlrZjlgLxcclxuICAgIGNvbnN0IGRlZmF1bHRHbG9iYWxMb2NhbFN0b3JhZ2U6IEdsb2JhbENhY2hlVHlwZSA9IHtcclxuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLnZhbHVlT2YoKSxcclxuICAgICAgICBpdGVtczoge31cclxuICAgIH1cclxuICAgIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oZ2xvYmFsQ2FjaGVOYW1lKSkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGdsb2JhbENhY2hlTmFtZSwgSlNPTi5zdHJpbmdpZnkoZGVmYXVsdEdsb2JhbExvY2FsU3RvcmFnZSkpXHJcbiAgICB9XHJcbiAgICAvL+a4heeQhui/h+acn+e8k+WtmFxyXG4gICAgY29uc3QgY2ggPSBnZXRHbG9iYWxDYWNoZSgpXHJcbiAgICBpZiAoIWNoKSByZXR1cm5cclxuICAgIE9iamVjdC5rZXlzKGNoLml0ZW1zKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGNoLml0ZW1zW2tleV1cclxuICAgICAgICBpZiAoIWl0ZW0gfHwgIWl0ZW0uZXhwaXJlKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5leHBpcmUgPCBuZXcgRGF0ZSgpLnZhbHVlT2YoKSkge1xyXG4gICAgICAgICAgICByZW1vdmUoa2V5KVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pKCkiXX0=