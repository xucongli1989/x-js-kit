"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalCache = getGlobalCache;
exports.setGlobalCacheName = setGlobalCacheName;
exports.add = add;
exports.remove = remove;
exports.get = get;
exports.clearExpired = clearExpired;
exports.getAutoClearExpiredTimeSpan = getAutoClearExpiredTimeSpan;
exports.setAutoClearExpiredTimeSpan = setAutoClearExpiredTimeSpan;

var _lib = require("../common/lib");

var globalCacheName = "x-js-kit-localcache";
/**
 * 自动清理过期缓存的间隔时间（毫秒），默认为30分钟
 */

var autoClearExpiredTimeSpan = 30 * 60 * 1000;
var clearExpiredIntervalId;
var isInited = false;

/**
 * 获取localStorage对象
 */
function getStore() {
  var store = (0, _lib.getLocalStorage)();

  if (!store || isInited) {
    return store;
  } //初始化


  isInited = true; //设置默认缓存值

  if (!store.getItem(globalCacheName)) {
    var defaultGlobalLocalStorage = {
      time: new Date().valueOf(),
      items: {}
    };
    store.setItem(globalCacheName, JSON.stringify(defaultGlobalLocalStorage));
  } //立即清理过期缓存


  clearExpired(); //执行定时清理过期缓存

  runClearExpiredInterval();
  return store;
} //立即初始化


getStore();
/**
 * 返回全局缓存对象
 */

function getGlobalCache() {
  var cacheValue = getStore().getItem(globalCacheName);

  if (!cacheValue) {
    return null;
  }

  return JSON.parse(cacheValue);
}
/**
 * 修改localStorage缓存的默认名称
 */


function setGlobalCacheName(name) {
  var oldValue = getStore().getItem(globalCacheName);
  getStore().removeItem(globalCacheName);
  globalCacheName = name;
  getStore().setItem(globalCacheName, oldValue);
}
/**
 * 添加数据至缓存（默认每30分钟自动清理所有过期的缓存）
 */


function add(key, value) {
  var cache = getGlobalCache();

  if (!cache) {
    return;
  }

  cache.items[key] = value;
  getStore().setItem(globalCacheName, JSON.stringify(cache));
}
/**
 * 删除指定缓存
 */


function remove(key) {
  var cache = getGlobalCache();

  if (!cache) {
    return;
  }

  delete cache.items[key];
  getStore().setItem(globalCacheName, JSON.stringify(cache));
}
/**
 * 读取指定缓存
 * @param key 缓存key
 * @param ignoreExpireCheck 是否忽略过期检测，默认为false.（true:即使过期，只要还没被清理，则依然返回。false:如果已过期，则删除此缓存并返回null）
 */


function get(key) {
  var ignoreExpireCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var cache = getGlobalCache();

  if (!cache) {
    return null;
  }

  var item = cache.items[key];

  if (!item) {
    return null;
  }

  if (!ignoreExpireCheck && item.expire && item.expire < new Date().valueOf()) {
    remove(key);
    return null;
  }

  return item;
}
/**
 * 清理过期缓存
 */


function clearExpired() {
  var ch = getGlobalCache();
  if (!ch) return;
  Object.keys(ch.items).forEach(function (key) {
    var item = ch.items[key];

    if (!item || !item.expire) {
      return;
    }

    if (item.expire < new Date().valueOf()) {
      remove(key);
    }
  });
}
/**
 * 执行自动定期清理
 */


function runClearExpiredInterval() {
  if (clearExpiredIntervalId) {
    clearInterval(clearExpiredIntervalId);
  }

  clearExpiredIntervalId = setInterval(clearExpired, autoClearExpiredTimeSpan);
}
/**
 * 获取自动清理过期缓存的间隔（毫秒）
 */


function getAutoClearExpiredTimeSpan() {
  return autoClearExpiredTimeSpan;
}
/**
 * 设置自动清理过期缓存的间隔（毫秒），并按计划执行清理
 */


function setAutoClearExpiredTimeSpan(timeSpan) {
  if (timeSpan <= 0) {
    throw new Error("timeSpan must > 0.");
  }

  autoClearExpiredTimeSpan = timeSpan;
  runClearExpiredInterval();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,