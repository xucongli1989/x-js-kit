"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLanguage = getDefaultLanguage;
exports.getDefaultCurrencySymbol = getDefaultCurrencySymbol;
exports.getLanguageNodeData = getLanguageNodeData;
exports.createOrInitI18nInstance = createOrInitI18nInstance;
exports.getXJsKitI18nInstance = getXJsKitI18nInstance;
exports.LanguageTypeEnumList = exports.LanguageTypeEnum = void 0;

var _i18next = _interopRequireDefault(require("i18next"));

var _enumTool = require("../common/enumTool");

var _data = require("../common/data");

var _lib = require("../common/lib");

var _data2 = require("./data");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LanguageTypeEnum;
exports.LanguageTypeEnum = LanguageTypeEnum;

(function (LanguageTypeEnum) {
  LanguageTypeEnum["\u7B80\u4F53\u4E2D\u6587"] = "zh-CN";
  LanguageTypeEnum["\u7E41\u9AD4\u4E2D\u6587"] = "zh-TW";
  LanguageTypeEnum["English"] = "en-US";
  LanguageTypeEnum["Fran\xE7ais"] = "fr-FR";
  LanguageTypeEnum["Deutsch"] = "de-DE";
  LanguageTypeEnum["Espa\xF1ol"] = "es-ES";
  LanguageTypeEnum["\u65E5\u672C\u8A9E"] = "ja-JP";
  LanguageTypeEnum["\uD55C\uAD6D\uC5B4"] = "ko-KR";
})(LanguageTypeEnum || (exports.LanguageTypeEnum = LanguageTypeEnum = {}));

var LanguageTypeEnumList = (0, _enumTool.convertEnumToList)(LanguageTypeEnum);
/**
 * 获取默认语言
 */

exports.LanguageTypeEnumList = LanguageTypeEnumList;

function getDefaultLanguage(isChina) {
  return isChina ? LanguageTypeEnum.简体中文 : LanguageTypeEnum.English;
}
/**
 * 获取默认的货币符号
 */


function getDefaultCurrencySymbol(isChina) {
  return isChina ? "¥" : "$";
}
/**
 * 获取指定对象中的某个语言节点中的数据。
 * 如果 data 是字符串，则直接返回该字符串；如果是 object，则返回 object[当前语言] ；如果 object[当前语言] 没有值，则返回 object[默认语言]
 */


function getLanguageNodeData(data, isChina, lang) {
  if (!data) {
    return null;
  } //如果是字符串，则直接返回原数据即可


  if ((0, _data.isString)(data)) {
    return data;
  }

  return data[lang] || data[getDefaultLanguage(isChina)];
}
/**
 * 创建或初始化 i18n 实例。注意：defaultInstance、initReact 必须作为参数由具体使用的项目传过来，因为每个项目的默认实例不一样
 */


function createOrInitI18nInstance(isCreateNewInstance, defaultInstance, initReact, isChina, lang, transData) {
  var defaultLang = getDefaultLanguage(isChina);
  var currentLang = lang && (0, _enumTool.isValueInEnum)(LanguageTypeEnum, lang) ? lang : defaultLang;
  var initOps = {
    lng: currentLang,
    supportedLngs: LanguageTypeEnumList.map(function (k) {
      return k.value;
    }),
    fallbackLng: defaultLang,
    interpolation: {
      escapeValue: false
    },
    resources: transData
  };
  var ins = initReact ? defaultInstance.use(initReact) : defaultInstance; //创建新的 i18n 实例

  if (isCreateNewInstance) {
    return ins.createInstance(initOps, function (err) {
      //此函数必须有，否则报错
      if (!err) {
        return;
      }

      console.error("Create new i18n instance error: ".concat(err));
    });
  } //初始化默认实例


  return ins.init(initOps, function (err) {
    if (!err) {
      return;
    }

    console.error("Init default i18n instance error: ".concat(err));
  });
}
/**
 * 获取当前组件库的 i18n 实例。这里会将 i18n 实例挂载到全局变量上，供不同组件跨模块访问。为什么要这样做？因为这个组件库中的每一个组件最终是分别 build 成一个独立的包，组件与组件是隔离的，并没有数据共享机制，如果不这样做，那么每个打包后的组件都有自己的 i18n 实例。
 */


function getXJsKitI18nInstance() {
  var globalObj = (0, _lib.getGlobalObject)();

  if (globalObj.___xJsKitI18nInstance) {
    return globalObj.___xJsKitI18nInstance;
  }

  globalObj.___xJsKitI18nInstance = createOrInitI18nInstance(true, _i18next.default, null, true, getDefaultLanguage(true), _data2.XJsKitI18nResourcesData);
  return globalObj.___xJsKitI18nInstance;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,