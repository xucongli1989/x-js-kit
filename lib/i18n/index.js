"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOrInitI18nInstance = createOrInitI18nInstance;
exports.LanguageTypeEnumList = exports.LanguageTypeEnum = void 0;

var _enumTool = require("../common/enumTool");

var LanguageTypeEnum;
exports.LanguageTypeEnum = LanguageTypeEnum;

(function (LanguageTypeEnum) {
  LanguageTypeEnum["\u7B80\u4F53\u4E2D\u6587"] = "zh-CN";
  LanguageTypeEnum["\u7E41\u9AD4\u4E2D\u6587"] = "zh-TW";
  LanguageTypeEnum["English"] = "en-US";
  LanguageTypeEnum["Fran\xE7ais"] = "fr-FR";
  LanguageTypeEnum["Deutsch"] = "de-DE";
  LanguageTypeEnum["Espa\xF1ol"] = "es-ES";
  LanguageTypeEnum["\u65E5\u672C\u8A9E"] = "ja-JP";
  LanguageTypeEnum["\uD55C\uAD6D\uC5B4"] = "ko-KR";
})(LanguageTypeEnum || (exports.LanguageTypeEnum = LanguageTypeEnum = {}));

var LanguageTypeEnumList = (0, _enumTool.convertEnumToList)(LanguageTypeEnum);
/**
 * 创建或初始化 i18n 实例。注意：defaultInstance、initReact 必须作为参数由具体使用的项目传过来，因为每个项目的默认实例不一样
 */

exports.LanguageTypeEnumList = LanguageTypeEnumList;

function createOrInitI18nInstance(isCreateNewInstance, defaultInstance, initReact, defaultLanguage, transData) {
  var initOps = {
    lng: defaultLanguage,
    supportedLngs: LanguageTypeEnumList.map(function (k) {
      return k.value;
    }),
    fallbackLng: LanguageTypeEnum.简体中文,
    interpolation: {
      escapeValue: false
    },
    resources: transData
  };
  var ins = defaultInstance.use(initReact); //创建新的 i18n 实例

  if (isCreateNewInstance) {
    return ins.createInstance(initOps, function (err) {
      //此函数必须有，否则报错
      if (!err) {
        return;
      }

      console.error("Create new i18n instance error: ".concat(err));
    });
  } //初始化默认实例


  return ins.init(initOps, function (err) {
    if (!err) {
      return;
    }

    console.error("Init default i18n instance error: ".concat(err));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pMThuL2luZGV4LnRzIl0sIm5hbWVzIjpbIkxhbmd1YWdlVHlwZUVudW0iLCJMYW5ndWFnZVR5cGVFbnVtTGlzdCIsImNyZWF0ZU9ySW5pdEkxOG5JbnN0YW5jZSIsImlzQ3JlYXRlTmV3SW5zdGFuY2UiLCJkZWZhdWx0SW5zdGFuY2UiLCJpbml0UmVhY3QiLCJkZWZhdWx0TGFuZ3VhZ2UiLCJ0cmFuc0RhdGEiLCJpbml0T3BzIiwibG5nIiwic3VwcG9ydGVkTG5ncyIsIm1hcCIsImsiLCJ2YWx1ZSIsImZhbGxiYWNrTG5nIiwi566A5L2T5Lit5paHIiwiaW50ZXJwb2xhdGlvbiIsImVzY2FwZVZhbHVlIiwicmVzb3VyY2VzIiwiaW5zIiwidXNlIiwiY3JlYXRlSW5zdGFuY2UiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJpbml0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBOztJQUVZQSxnQjs7O1dBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0dBQUFBLGdCLGdDQUFBQSxnQjs7QUFVTCxJQUFNQyxvQkFBb0IsR0FBRyxpQ0FBa0JELGdCQUFsQixDQUE3QjtBQUVQO0FBQ0E7QUFDQTs7OztBQUNPLFNBQVNFLHdCQUFULENBQWtDQyxtQkFBbEMsRUFBZ0VDLGVBQWhFLEVBQThGQyxTQUE5RixFQUEySEMsZUFBM0gsRUFBOEpDLFNBQTlKLEVBQW1MO0FBQ3RMLE1BQU1DLE9BQW9CLEdBQUc7QUFDekJDLElBQUFBLEdBQUcsRUFBRUgsZUFEb0I7QUFFekJJLElBQUFBLGFBQWEsRUFBRVQsb0JBQW9CLENBQUNVLEdBQXJCLENBQXlCLFVBQUNDLENBQUQ7QUFBQSxhQUFPQSxDQUFDLENBQUNDLEtBQVQ7QUFBQSxLQUF6QixDQUZVO0FBR3pCQyxJQUFBQSxXQUFXLEVBQUVkLGdCQUFnQixDQUFDZSxJQUhMO0FBSXpCQyxJQUFBQSxhQUFhLEVBQUU7QUFDWEMsTUFBQUEsV0FBVyxFQUFFO0FBREYsS0FKVTtBQU96QkMsSUFBQUEsU0FBUyxFQUFFWDtBQVBjLEdBQTdCO0FBVUEsTUFBTVksR0FBRyxHQUFHZixlQUFlLENBQUNnQixHQUFoQixDQUFvQmYsU0FBcEIsQ0FBWixDQVhzTCxDQWF0TDs7QUFDQSxNQUFJRixtQkFBSixFQUF5QjtBQUNyQixXQUFPZ0IsR0FBRyxDQUFDRSxjQUFKLENBQW1CYixPQUFuQixFQUE0QixVQUFDYyxHQUFELEVBQVM7QUFDeEM7QUFDQSxVQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNOO0FBQ0g7O0FBQ0RDLE1BQUFBLE9BQU8sQ0FBQ0MsS0FBUiwyQ0FBaURGLEdBQWpEO0FBQ0gsS0FOTSxDQUFQO0FBT0gsR0F0QnFMLENBd0J0TDs7O0FBQ0EsU0FBT0gsR0FBRyxDQUFDTSxJQUFKLENBQVNqQixPQUFULEVBQWtCLFVBQUNjLEdBQUQsRUFBUztBQUM5QixRQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNOO0FBQ0g7O0FBQ0RDLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUiw2Q0FBbURGLEdBQW5EO0FBQ0gsR0FMTSxDQUFQO0FBTUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaTE4biwgeyBJbml0T3B0aW9ucywgUmVzb3VyY2UsIFRoaXJkUGFydHlNb2R1bGUgfSBmcm9tIFwiaTE4bmV4dFwiXHJcbmltcG9ydCB7IGNvbnZlcnRFbnVtVG9MaXN0IH0gZnJvbSBcIi4uL2NvbW1vbi9lbnVtVG9vbFwiXHJcblxyXG5leHBvcnQgZW51bSBMYW5ndWFnZVR5cGVFbnVtIHtcclxuICAgIOeugOS9k+S4reaWhyA9IFwiemgtQ05cIixcclxuICAgIOe5gemrlOS4reaWhyA9IFwiemgtVFdcIixcclxuICAgIEVuZ2xpc2ggPSBcImVuLVVTXCIsXHJcbiAgICBGcmFuw6dhaXMgPSBcImZyLUZSXCIsXHJcbiAgICBEZXV0c2NoID0gXCJkZS1ERVwiLFxyXG4gICAgRXNwYcOxb2wgPSBcImVzLUVTXCIsXHJcbiAgICDml6XmnKzoqp4gPSBcImphLUpQXCIsXHJcbiAgICDtlZzqta3slrQgPSBcImtvLUtSXCJcclxufVxyXG5leHBvcnQgY29uc3QgTGFuZ3VhZ2VUeXBlRW51bUxpc3QgPSBjb252ZXJ0RW51bVRvTGlzdChMYW5ndWFnZVR5cGVFbnVtKVxyXG5cclxuLyoqXHJcbiAqIOWIm+W7uuaIluWIneWni+WMliBpMThuIOWunuS+i+OAguazqOaEj++8mmRlZmF1bHRJbnN0YW5jZeOAgWluaXRSZWFjdCDlv4XpobvkvZzkuLrlj4LmlbDnlLHlhbfkvZPkvb/nlKjnmoTpobnnm67kvKDov4fmnaXvvIzlm6DkuLrmr4/kuKrpobnnm67nmoTpu5jorqTlrp7kvovkuI3kuIDmoLdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPckluaXRJMThuSW5zdGFuY2UoaXNDcmVhdGVOZXdJbnN0YW5jZTogYm9vbGVhbiwgZGVmYXVsdEluc3RhbmNlOiB0eXBlb2YgaTE4biwgaW5pdFJlYWN0OiBUaGlyZFBhcnR5TW9kdWxlLCBkZWZhdWx0TGFuZ3VhZ2U6IExhbmd1YWdlVHlwZUVudW0sIHRyYW5zRGF0YTogUmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IGluaXRPcHM6IEluaXRPcHRpb25zID0ge1xyXG4gICAgICAgIGxuZzogZGVmYXVsdExhbmd1YWdlLFxyXG4gICAgICAgIHN1cHBvcnRlZExuZ3M6IExhbmd1YWdlVHlwZUVudW1MaXN0Lm1hcCgoaykgPT4gay52YWx1ZSksXHJcbiAgICAgICAgZmFsbGJhY2tMbmc6IExhbmd1YWdlVHlwZUVudW0u566A5L2T5Lit5paHLFxyXG4gICAgICAgIGludGVycG9sYXRpb246IHtcclxuICAgICAgICAgICAgZXNjYXBlVmFsdWU6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNvdXJjZXM6IHRyYW5zRGF0YVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlucyA9IGRlZmF1bHRJbnN0YW5jZS51c2UoaW5pdFJlYWN0KVxyXG5cclxuICAgIC8v5Yib5bu65paw55qEIGkxOG4g5a6e5L6LXHJcbiAgICBpZiAoaXNDcmVhdGVOZXdJbnN0YW5jZSkge1xyXG4gICAgICAgIHJldHVybiBpbnMuY3JlYXRlSW5zdGFuY2UoaW5pdE9wcywgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAvL+atpOWHveaVsOW/hemhu+acie+8jOWQpuWImeaKpemUmVxyXG4gICAgICAgICAgICBpZiAoIWVycikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ3JlYXRlIG5ldyBpMThuIGluc3RhbmNlIGVycm9yOiAke2Vycn1gKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy/liJ3lp4vljJbpu5jorqTlrp7kvotcclxuICAgIHJldHVybiBpbnMuaW5pdChpbml0T3BzLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEluaXQgZGVmYXVsdCBpMThuIGluc3RhbmNlIGVycm9yOiAke2Vycn1gKVxyXG4gICAgfSlcclxufVxyXG4iXX0=