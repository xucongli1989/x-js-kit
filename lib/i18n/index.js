"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLanguage = getDefaultLanguage;
exports.createOrInitI18nInstance = createOrInitI18nInstance;
exports.LanguageTypeEnumList = exports.LanguageTypeEnum = void 0;

var _enumTool = require("../common/enumTool");

var LanguageTypeEnum;
exports.LanguageTypeEnum = LanguageTypeEnum;

(function (LanguageTypeEnum) {
  LanguageTypeEnum["\u7B80\u4F53\u4E2D\u6587"] = "zh-CN";
  LanguageTypeEnum["\u7E41\u9AD4\u4E2D\u6587"] = "zh-TW";
  LanguageTypeEnum["English"] = "en-US";
  LanguageTypeEnum["Fran\xE7ais"] = "fr-FR";
  LanguageTypeEnum["Deutsch"] = "de-DE";
  LanguageTypeEnum["Espa\xF1ol"] = "es-ES";
  LanguageTypeEnum["\u65E5\u672C\u8A9E"] = "ja-JP";
  LanguageTypeEnum["\uD55C\uAD6D\uC5B4"] = "ko-KR";
})(LanguageTypeEnum || (exports.LanguageTypeEnum = LanguageTypeEnum = {}));

var LanguageTypeEnumList = (0, _enumTool.convertEnumToList)(LanguageTypeEnum);
/**
 * 获取默认语言
 */

exports.LanguageTypeEnumList = LanguageTypeEnumList;

function getDefaultLanguage(isChina) {
  return isChina ? LanguageTypeEnum.简体中文 : LanguageTypeEnum.English;
}
/**
 * 创建或初始化 i18n 实例。注意：defaultInstance、initReact 必须作为参数由具体使用的项目传过来，因为每个项目的默认实例不一样
 */


function createOrInitI18nInstance(isCreateNewInstance, defaultInstance, initReact, isChina, lang, transData) {
  var defaultLang = getDefaultLanguage(isChina);
  var currentLang = lang && (0, _enumTool.isValueInEnum)(LanguageTypeEnum, lang) ? lang : defaultLang;
  var initOps = {
    lng: currentLang,
    supportedLngs: LanguageTypeEnumList.map(function (k) {
      return k.value;
    }),
    fallbackLng: defaultLang,
    interpolation: {
      escapeValue: false
    },
    resources: transData
  };
  var ins = initReact ? defaultInstance.use(initReact) : defaultInstance; //创建新的 i18n 实例

  if (isCreateNewInstance) {
    return ins.createInstance(initOps, function (err) {
      //此函数必须有，否则报错
      if (!err) {
        return;
      }

      console.error("Create new i18n instance error: ".concat(err));
    });
  } //初始化默认实例


  return ins.init(initOps, function (err) {
    if (!err) {
      return;
    }

    console.error("Init default i18n instance error: ".concat(err));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pMThuL2luZGV4LnRzIl0sIm5hbWVzIjpbIkxhbmd1YWdlVHlwZUVudW0iLCJMYW5ndWFnZVR5cGVFbnVtTGlzdCIsImdldERlZmF1bHRMYW5ndWFnZSIsImlzQ2hpbmEiLCLnroDkvZPkuK3mlociLCJFbmdsaXNoIiwiY3JlYXRlT3JJbml0STE4bkluc3RhbmNlIiwiaXNDcmVhdGVOZXdJbnN0YW5jZSIsImRlZmF1bHRJbnN0YW5jZSIsImluaXRSZWFjdCIsImxhbmciLCJ0cmFuc0RhdGEiLCJkZWZhdWx0TGFuZyIsImN1cnJlbnRMYW5nIiwiaW5pdE9wcyIsImxuZyIsInN1cHBvcnRlZExuZ3MiLCJtYXAiLCJrIiwidmFsdWUiLCJmYWxsYmFja0xuZyIsImludGVycG9sYXRpb24iLCJlc2NhcGVWYWx1ZSIsInJlc291cmNlcyIsImlucyIsInVzZSIsImNyZWF0ZUluc3RhbmNlIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiaW5pdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0E7O0lBRVlBLGdCOzs7V0FBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7QUFBQUEsRUFBQUEsZ0I7R0FBQUEsZ0IsZ0NBQUFBLGdCOztBQVVMLElBQU1DLG9CQUFvQixHQUFHLGlDQUFrQkQsZ0JBQWxCLENBQTdCO0FBRVA7QUFDQTtBQUNBOzs7O0FBQ08sU0FBU0Usa0JBQVQsQ0FBNEJDLE9BQTVCLEVBQThDO0FBQ2pELFNBQU9BLE9BQU8sR0FBR0gsZ0JBQWdCLENBQUNJLElBQXBCLEdBQTJCSixnQkFBZ0IsQ0FBQ0ssT0FBMUQ7QUFDSDtBQUVEO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0Msd0JBQVQsQ0FBa0NDLG1CQUFsQyxFQUFnRUMsZUFBaEUsRUFBdUZDLFNBQXZGLEVBQW9ITixPQUFwSCxFQUFzSU8sSUFBdEksRUFBOEpDLFNBQTlKLEVBQW1MO0FBQ3RMLE1BQU1DLFdBQVcsR0FBR1Ysa0JBQWtCLENBQUNDLE9BQUQsQ0FBdEM7QUFDQSxNQUFNVSxXQUFXLEdBQUdILElBQUksSUFBSSw2QkFBY1YsZ0JBQWQsRUFBZ0NVLElBQWhDLENBQVIsR0FBZ0RBLElBQWhELEdBQXVERSxXQUEzRTtBQUVBLE1BQU1FLE9BQW9CLEdBQUc7QUFDekJDLElBQUFBLEdBQUcsRUFBRUYsV0FEb0I7QUFFekJHLElBQUFBLGFBQWEsRUFBRWYsb0JBQW9CLENBQUNnQixHQUFyQixDQUF5QixVQUFDQyxDQUFEO0FBQUEsYUFBT0EsQ0FBQyxDQUFDQyxLQUFUO0FBQUEsS0FBekIsQ0FGVTtBQUd6QkMsSUFBQUEsV0FBVyxFQUFFUixXQUhZO0FBSXpCUyxJQUFBQSxhQUFhLEVBQUU7QUFDWEMsTUFBQUEsV0FBVyxFQUFFO0FBREYsS0FKVTtBQU96QkMsSUFBQUEsU0FBUyxFQUFFWjtBQVBjLEdBQTdCO0FBVUEsTUFBTWEsR0FBRyxHQUFHZixTQUFTLEdBQUdELGVBQWUsQ0FBQ2lCLEdBQWhCLENBQW9CaEIsU0FBcEIsQ0FBSCxHQUFvQ0QsZUFBekQsQ0Fkc0wsQ0FnQnRMOztBQUNBLE1BQUlELG1CQUFKLEVBQXlCO0FBQ3JCLFdBQU9pQixHQUFHLENBQUNFLGNBQUosQ0FBbUJaLE9BQW5CLEVBQTRCLFVBQUNhLEdBQUQsRUFBUztBQUN4QztBQUNBLFVBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ047QUFDSDs7QUFDREMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLDJDQUFpREYsR0FBakQ7QUFDSCxLQU5NLENBQVA7QUFPSCxHQXpCcUwsQ0EyQnRMOzs7QUFDQSxTQUFPSCxHQUFHLENBQUNNLElBQUosQ0FBU2hCLE9BQVQsRUFBa0IsVUFBQ2EsR0FBRCxFQUFTO0FBQzlCLFFBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ047QUFDSDs7QUFDREMsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLDZDQUFtREYsR0FBbkQ7QUFDSCxHQUxNLENBQVA7QUFNSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGkxOG4sIEluaXRPcHRpb25zLCBSZXNvdXJjZSwgVGhpcmRQYXJ0eU1vZHVsZSB9IGZyb20gXCJpMThuZXh0XCJcclxuaW1wb3J0IHsgY29udmVydEVudW1Ub0xpc3QsIGlzVmFsdWVJbkVudW0gfSBmcm9tIFwiLi4vY29tbW9uL2VudW1Ub29sXCJcclxuXHJcbmV4cG9ydCBlbnVtIExhbmd1YWdlVHlwZUVudW0ge1xyXG4gICAg566A5L2T5Lit5paHID0gXCJ6aC1DTlwiLFxyXG4gICAg57mB6auU5Lit5paHID0gXCJ6aC1UV1wiLFxyXG4gICAgRW5nbGlzaCA9IFwiZW4tVVNcIixcclxuICAgIEZyYW7Dp2FpcyA9IFwiZnItRlJcIixcclxuICAgIERldXRzY2ggPSBcImRlLURFXCIsXHJcbiAgICBFc3Bhw7FvbCA9IFwiZXMtRVNcIixcclxuICAgIOaXpeacrOiqniA9IFwiamEtSlBcIixcclxuICAgIO2VnOq1reyWtCA9IFwia28tS1JcIlxyXG59XHJcbmV4cG9ydCBjb25zdCBMYW5ndWFnZVR5cGVFbnVtTGlzdCA9IGNvbnZlcnRFbnVtVG9MaXN0KExhbmd1YWdlVHlwZUVudW0pXHJcblxyXG4vKipcclxuICog6I635Y+W6buY6K6k6K+t6KiAXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdExhbmd1YWdlKGlzQ2hpbmE6IGJvb2xlYW4pIHtcclxuICAgIHJldHVybiBpc0NoaW5hID8gTGFuZ3VhZ2VUeXBlRW51bS7nroDkvZPkuK3mlocgOiBMYW5ndWFnZVR5cGVFbnVtLkVuZ2xpc2hcclxufVxyXG5cclxuLyoqXHJcbiAqIOWIm+W7uuaIluWIneWni+WMliBpMThuIOWunuS+i+OAguazqOaEj++8mmRlZmF1bHRJbnN0YW5jZeOAgWluaXRSZWFjdCDlv4XpobvkvZzkuLrlj4LmlbDnlLHlhbfkvZPkvb/nlKjnmoTpobnnm67kvKDov4fmnaXvvIzlm6DkuLrmr4/kuKrpobnnm67nmoTpu5jorqTlrp7kvovkuI3kuIDmoLdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPckluaXRJMThuSW5zdGFuY2UoaXNDcmVhdGVOZXdJbnN0YW5jZTogYm9vbGVhbiwgZGVmYXVsdEluc3RhbmNlOiBpMThuLCBpbml0UmVhY3Q6IFRoaXJkUGFydHlNb2R1bGUsIGlzQ2hpbmE6IGJvb2xlYW4sIGxhbmc6IExhbmd1YWdlVHlwZUVudW0sIHRyYW5zRGF0YTogUmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IGRlZmF1bHRMYW5nID0gZ2V0RGVmYXVsdExhbmd1YWdlKGlzQ2hpbmEpXHJcbiAgICBjb25zdCBjdXJyZW50TGFuZyA9IGxhbmcgJiYgaXNWYWx1ZUluRW51bShMYW5ndWFnZVR5cGVFbnVtLCBsYW5nKSA/IGxhbmcgOiBkZWZhdWx0TGFuZ1xyXG5cclxuICAgIGNvbnN0IGluaXRPcHM6IEluaXRPcHRpb25zID0ge1xyXG4gICAgICAgIGxuZzogY3VycmVudExhbmcsXHJcbiAgICAgICAgc3VwcG9ydGVkTG5nczogTGFuZ3VhZ2VUeXBlRW51bUxpc3QubWFwKChrKSA9PiBrLnZhbHVlKSxcclxuICAgICAgICBmYWxsYmFja0xuZzogZGVmYXVsdExhbmcsXHJcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xyXG4gICAgICAgICAgICBlc2NhcGVWYWx1ZTogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc291cmNlczogdHJhbnNEYXRhXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5zID0gaW5pdFJlYWN0ID8gZGVmYXVsdEluc3RhbmNlLnVzZShpbml0UmVhY3QpIDogZGVmYXVsdEluc3RhbmNlXHJcblxyXG4gICAgLy/liJvlu7rmlrDnmoQgaTE4biDlrp7kvotcclxuICAgIGlmIChpc0NyZWF0ZU5ld0luc3RhbmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGlucy5jcmVhdGVJbnN0YW5jZShpbml0T3BzLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIC8v5q2k5Ye95pWw5b+F6aG75pyJ77yM5ZCm5YiZ5oql6ZSZXHJcbiAgICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDcmVhdGUgbmV3IGkxOG4gaW5zdGFuY2UgZXJyb3I6ICR7ZXJyfWApXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL+WIneWni+WMlum7mOiupOWunuS+i1xyXG4gICAgcmV0dXJuIGlucy5pbml0KGluaXRPcHMsIChlcnIpID0+IHtcclxuICAgICAgICBpZiAoIWVycikge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW5pdCBkZWZhdWx0IGkxOG4gaW5zdGFuY2UgZXJyb3I6ICR7ZXJyfWApXHJcbiAgICB9KVxyXG59XHJcbiJdfQ==