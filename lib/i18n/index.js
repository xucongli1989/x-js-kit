"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLanguage = getDefaultLanguage;
exports.getDefaultCurrencySymbol = getDefaultCurrencySymbol;
exports.getLanguageNodeData = getLanguageNodeData;
exports.createOrInitI18nInstance = createOrInitI18nInstance;
exports.LanguageTypeEnumList = exports.LanguageTypeEnum = void 0;

var _enumTool = require("../common/enumTool");

var _data = require("../common/data");

var LanguageTypeEnum;
exports.LanguageTypeEnum = LanguageTypeEnum;

(function (LanguageTypeEnum) {
  LanguageTypeEnum["\u7B80\u4F53\u4E2D\u6587"] = "zh-CN";
  LanguageTypeEnum["\u7E41\u9AD4\u4E2D\u6587"] = "zh-TW";
  LanguageTypeEnum["English"] = "en-US";
  LanguageTypeEnum["Fran\xE7ais"] = "fr-FR";
  LanguageTypeEnum["Deutsch"] = "de-DE";
  LanguageTypeEnum["Espa\xF1ol"] = "es-ES";
  LanguageTypeEnum["\u65E5\u672C\u8A9E"] = "ja-JP";
  LanguageTypeEnum["\uD55C\uAD6D\uC5B4"] = "ko-KR";
})(LanguageTypeEnum || (exports.LanguageTypeEnum = LanguageTypeEnum = {}));

var LanguageTypeEnumList = (0, _enumTool.convertEnumToList)(LanguageTypeEnum);
/**
 * 获取默认语言
 */

exports.LanguageTypeEnumList = LanguageTypeEnumList;

function getDefaultLanguage(isChina) {
  return isChina ? LanguageTypeEnum.简体中文 : LanguageTypeEnum.English;
}
/**
 * 获取默认的货币符号
 */


function getDefaultCurrencySymbol(isChina) {
  return isChina ? "¥" : "$";
}
/**
 * 获取指定对象中的某个语言节点中的数据。
 * 如果 data 是字符串，则直接返回该字符串；如果是 object，则返回 object[当前语言] ；如果 object[当前语言] 没有值，则返回 object[默认语言]
 */


function getLanguageNodeData(data, isChina, lang) {
  if (!data) {
    return null;
  } //如果是字符串，则直接返回原数据即可


  if ((0, _data.isString)(data)) {
    return data;
  }

  return data[lang] || data[getDefaultLanguage(isChina)];
}
/**
 * 创建或初始化 i18n 实例。注意：defaultInstance、initReact 必须作为参数由具体使用的项目传过来，因为每个项目的默认实例不一样
 */


function createOrInitI18nInstance(isCreateNewInstance, defaultInstance, initReact, isChina, lang, transData) {
  var defaultLang = getDefaultLanguage(isChina);
  var currentLang = lang && (0, _enumTool.isValueInEnum)(LanguageTypeEnum, lang) ? lang : defaultLang;
  var initOps = {
    lng: currentLang,
    supportedLngs: LanguageTypeEnumList.map(function (k) {
      return k.value;
    }),
    fallbackLng: defaultLang,
    interpolation: {
      escapeValue: false
    },
    resources: transData
  };
  var ins = initReact ? defaultInstance.use(initReact) : defaultInstance; //创建新的 i18n 实例

  if (isCreateNewInstance) {
    return ins.createInstance(initOps, function (err) {
      //此函数必须有，否则报错
      if (!err) {
        return;
      }

      console.error("Create new i18n instance error: ".concat(err));
    });
  } //初始化默认实例


  return ins.init(initOps, function (err) {
    if (!err) {
      return;
    }

    console.error("Init default i18n instance error: ".concat(err));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pMThuL2luZGV4LnRzIl0sIm5hbWVzIjpbIkxhbmd1YWdlVHlwZUVudW0iLCJMYW5ndWFnZVR5cGVFbnVtTGlzdCIsImdldERlZmF1bHRMYW5ndWFnZSIsImlzQ2hpbmEiLCLnroDkvZPkuK3mlociLCJFbmdsaXNoIiwiZ2V0RGVmYXVsdEN1cnJlbmN5U3ltYm9sIiwiZ2V0TGFuZ3VhZ2VOb2RlRGF0YSIsImRhdGEiLCJsYW5nIiwiY3JlYXRlT3JJbml0STE4bkluc3RhbmNlIiwiaXNDcmVhdGVOZXdJbnN0YW5jZSIsImRlZmF1bHRJbnN0YW5jZSIsImluaXRSZWFjdCIsInRyYW5zRGF0YSIsImRlZmF1bHRMYW5nIiwiY3VycmVudExhbmciLCJpbml0T3BzIiwibG5nIiwic3VwcG9ydGVkTG5ncyIsIm1hcCIsImsiLCJ2YWx1ZSIsImZhbGxiYWNrTG5nIiwiaW50ZXJwb2xhdGlvbiIsImVzY2FwZVZhbHVlIiwicmVzb3VyY2VzIiwiaW5zIiwidXNlIiwiY3JlYXRlSW5zdGFuY2UiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJpbml0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztJQUVZQSxnQjs7O1dBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0dBQUFBLGdCLGdDQUFBQSxnQjs7QUFVTCxJQUFNQyxvQkFBb0IsR0FBRyxpQ0FBa0JELGdCQUFsQixDQUE3QjtBQUVQO0FBQ0E7QUFDQTs7OztBQUNPLFNBQVNFLGtCQUFULENBQTRCQyxPQUE1QixFQUE4QztBQUNqRCxTQUFPQSxPQUFPLEdBQUdILGdCQUFnQixDQUFDSSxJQUFwQixHQUEyQkosZ0JBQWdCLENBQUNLLE9BQTFEO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLHdCQUFULENBQWtDSCxPQUFsQyxFQUFvRDtBQUN2RCxTQUFPQSxPQUFPLEdBQUcsR0FBSCxHQUFTLEdBQXZCO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0ksbUJBQVQsQ0FBZ0NDLElBQWhDLEVBQTRFTCxPQUE1RSxFQUE4Rk0sSUFBOUYsRUFBc0g7QUFDekgsTUFBSSxDQUFDRCxJQUFMLEVBQVc7QUFDUCxXQUFPLElBQVA7QUFDSCxHQUh3SCxDQUl6SDs7O0FBQ0EsTUFBSSxvQkFBU0EsSUFBVCxDQUFKLEVBQW9CO0FBQ2hCLFdBQU9BLElBQVA7QUFDSDs7QUFDRCxTQUFRQSxJQUFELENBQXNDQyxJQUF0QyxLQUFnREQsSUFBRCxDQUFzQ04sa0JBQWtCLENBQUNDLE9BQUQsQ0FBeEQsQ0FBdEQ7QUFDSDtBQUVEO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU08sd0JBQVQsQ0FBa0NDLG1CQUFsQyxFQUFnRUMsZUFBaEUsRUFBdUZDLFNBQXZGLEVBQW9IVixPQUFwSCxFQUFzSU0sSUFBdEksRUFBOEpLLFNBQTlKLEVBQW1MO0FBQ3RMLE1BQU1DLFdBQVcsR0FBR2Isa0JBQWtCLENBQUNDLE9BQUQsQ0FBdEM7QUFDQSxNQUFNYSxXQUFXLEdBQUdQLElBQUksSUFBSSw2QkFBY1QsZ0JBQWQsRUFBZ0NTLElBQWhDLENBQVIsR0FBZ0RBLElBQWhELEdBQXVETSxXQUEzRTtBQUVBLE1BQU1FLE9BQW9CLEdBQUc7QUFDekJDLElBQUFBLEdBQUcsRUFBRUYsV0FEb0I7QUFFekJHLElBQUFBLGFBQWEsRUFBRWxCLG9CQUFvQixDQUFDbUIsR0FBckIsQ0FBeUIsVUFBQ0MsQ0FBRDtBQUFBLGFBQU9BLENBQUMsQ0FBQ0MsS0FBVDtBQUFBLEtBQXpCLENBRlU7QUFHekJDLElBQUFBLFdBQVcsRUFBRVIsV0FIWTtBQUl6QlMsSUFBQUEsYUFBYSxFQUFFO0FBQ1hDLE1BQUFBLFdBQVcsRUFBRTtBQURGLEtBSlU7QUFPekJDLElBQUFBLFNBQVMsRUFBRVo7QUFQYyxHQUE3QjtBQVVBLE1BQU1hLEdBQUcsR0FBR2QsU0FBUyxHQUFHRCxlQUFlLENBQUNnQixHQUFoQixDQUFvQmYsU0FBcEIsQ0FBSCxHQUFvQ0QsZUFBekQsQ0Fkc0wsQ0FnQnRMOztBQUNBLE1BQUlELG1CQUFKLEVBQXlCO0FBQ3JCLFdBQU9nQixHQUFHLENBQUNFLGNBQUosQ0FBbUJaLE9BQW5CLEVBQTRCLFVBQUNhLEdBQUQsRUFBUztBQUN4QztBQUNBLFVBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ047QUFDSDs7QUFDREMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLDJDQUFpREYsR0FBakQ7QUFDSCxLQU5NLENBQVA7QUFPSCxHQXpCcUwsQ0EyQnRMOzs7QUFDQSxTQUFPSCxHQUFHLENBQUNNLElBQUosQ0FBU2hCLE9BQVQsRUFBa0IsVUFBQ2EsR0FBRCxFQUFTO0FBQzlCLFFBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ047QUFDSDs7QUFDREMsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLDZDQUFtREYsR0FBbkQ7QUFDSCxHQUxNLENBQVA7QUFNSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGkxOG4sIEluaXRPcHRpb25zLCBSZXNvdXJjZSwgVGhpcmRQYXJ0eU1vZHVsZSB9IGZyb20gXCJpMThuZXh0XCJcclxuaW1wb3J0IHsgY29udmVydEVudW1Ub0xpc3QsIGlzVmFsdWVJbkVudW0gfSBmcm9tIFwiLi4vY29tbW9uL2VudW1Ub29sXCJcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vY29tbW9uL2RhdGFcIlxyXG5cclxuZXhwb3J0IGVudW0gTGFuZ3VhZ2VUeXBlRW51bSB7XHJcbiAgICDnroDkvZPkuK3mlocgPSBcInpoLUNOXCIsXHJcbiAgICDnuYHpq5TkuK3mlocgPSBcInpoLVRXXCIsXHJcbiAgICBFbmdsaXNoID0gXCJlbi1VU1wiLFxyXG4gICAgRnJhbsOnYWlzID0gXCJmci1GUlwiLFxyXG4gICAgRGV1dHNjaCA9IFwiZGUtREVcIixcclxuICAgIEVzcGHDsW9sID0gXCJlcy1FU1wiLFxyXG4gICAg5pel5pys6KqeID0gXCJqYS1KUFwiLFxyXG4gICAg7ZWc6rWt7Ja0ID0gXCJrby1LUlwiXHJcbn1cclxuZXhwb3J0IGNvbnN0IExhbmd1YWdlVHlwZUVudW1MaXN0ID0gY29udmVydEVudW1Ub0xpc3QoTGFuZ3VhZ2VUeXBlRW51bSlcclxuXHJcbi8qKlxyXG4gKiDojrflj5bpu5jorqTor63oqIBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TGFuZ3VhZ2UoaXNDaGluYTogYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIGlzQ2hpbmEgPyBMYW5ndWFnZVR5cGVFbnVtLueugOS9k+S4reaWhyA6IExhbmd1YWdlVHlwZUVudW0uRW5nbGlzaFxyXG59XHJcblxyXG4vKipcclxuICog6I635Y+W6buY6K6k55qE6LSn5biB56ym5Y+3XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEN1cnJlbmN5U3ltYm9sKGlzQ2hpbmE6IGJvb2xlYW4pIHtcclxuICAgIHJldHVybiBpc0NoaW5hID8gXCLCpVwiIDogXCIkXCJcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPluaMh+WumuWvueixoeS4reeahOafkOS4quivreiogOiKgueCueS4reeahOaVsOaNruOAglxyXG4gKiDlpoLmnpwgZGF0YSDmmK/lrZfnrKbkuLLvvIzliJnnm7TmjqXov5Tlm57or6XlrZfnrKbkuLLvvJvlpoLmnpzmmK8gb2JqZWN077yM5YiZ6L+U5ZueIG9iamVjdFvlvZPliY3or63oqIBdIO+8m+WmguaenCBvYmplY3Rb5b2T5YmN6K+t6KiAXSDmsqHmnInlgLzvvIzliJnov5Tlm54gb2JqZWN0W+m7mOiupOivreiogF1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMYW5ndWFnZU5vZGVEYXRhPFQ+KGRhdGE6IHN0cmluZyB8IFJlY29yZDxMYW5ndWFnZVR5cGVFbnVtLCBUPiwgaXNDaGluYTogYm9vbGVhbiwgbGFuZzogTGFuZ3VhZ2VUeXBlRW51bSkge1xyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICAgIC8v5aaC5p6c5piv5a2X56ym5Liy77yM5YiZ55u05o6l6L+U5Zue5Y6f5pWw5o2u5Y2z5Y+vXHJcbiAgICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcclxuICAgICAgICByZXR1cm4gZGF0YSBhcyBzdHJpbmdcclxuICAgIH1cclxuICAgIHJldHVybiAoZGF0YSBhcyBSZWNvcmQ8TGFuZ3VhZ2VUeXBlRW51bSwgVD4pW2xhbmddIHx8IChkYXRhIGFzIFJlY29yZDxMYW5ndWFnZVR5cGVFbnVtLCBUPilbZ2V0RGVmYXVsdExhbmd1YWdlKGlzQ2hpbmEpXVxyXG59XHJcblxyXG4vKipcclxuICog5Yib5bu65oiW5Yid5aeL5YyWIGkxOG4g5a6e5L6L44CC5rOo5oSP77yaZGVmYXVsdEluc3RhbmNl44CBaW5pdFJlYWN0IOW/hemhu+S9nOS4uuWPguaVsOeUseWFt+S9k+S9v+eUqOeahOmhueebruS8oOi/h+adpe+8jOWboOS4uuavj+S4qumhueebrueahOm7mOiupOWunuS+i+S4jeS4gOagt1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9ySW5pdEkxOG5JbnN0YW5jZShpc0NyZWF0ZU5ld0luc3RhbmNlOiBib29sZWFuLCBkZWZhdWx0SW5zdGFuY2U6IGkxOG4sIGluaXRSZWFjdDogVGhpcmRQYXJ0eU1vZHVsZSwgaXNDaGluYTogYm9vbGVhbiwgbGFuZzogTGFuZ3VhZ2VUeXBlRW51bSwgdHJhbnNEYXRhOiBSZXNvdXJjZSkge1xyXG4gICAgY29uc3QgZGVmYXVsdExhbmcgPSBnZXREZWZhdWx0TGFuZ3VhZ2UoaXNDaGluYSlcclxuICAgIGNvbnN0IGN1cnJlbnRMYW5nID0gbGFuZyAmJiBpc1ZhbHVlSW5FbnVtKExhbmd1YWdlVHlwZUVudW0sIGxhbmcpID8gbGFuZyA6IGRlZmF1bHRMYW5nXHJcblxyXG4gICAgY29uc3QgaW5pdE9wczogSW5pdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgbG5nOiBjdXJyZW50TGFuZyxcclxuICAgICAgICBzdXBwb3J0ZWRMbmdzOiBMYW5ndWFnZVR5cGVFbnVtTGlzdC5tYXAoKGspID0+IGsudmFsdWUpLFxyXG4gICAgICAgIGZhbGxiYWNrTG5nOiBkZWZhdWx0TGFuZyxcclxuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XHJcbiAgICAgICAgICAgIGVzY2FwZVZhbHVlOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzb3VyY2VzOiB0cmFuc0RhdGFcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbnMgPSBpbml0UmVhY3QgPyBkZWZhdWx0SW5zdGFuY2UudXNlKGluaXRSZWFjdCkgOiBkZWZhdWx0SW5zdGFuY2VcclxuXHJcbiAgICAvL+WIm+W7uuaWsOeahCBpMThuIOWunuS+i1xyXG4gICAgaWYgKGlzQ3JlYXRlTmV3SW5zdGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gaW5zLmNyZWF0ZUluc3RhbmNlKGluaXRPcHMsIChlcnIpID0+IHtcclxuICAgICAgICAgICAgLy/mraTlh73mlbDlv4XpobvmnInvvIzlkKbliJnmiqXplJlcclxuICAgICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENyZWF0ZSBuZXcgaTE4biBpbnN0YW5jZSBlcnJvcjogJHtlcnJ9YClcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8v5Yid5aeL5YyW6buY6K6k5a6e5L6LXHJcbiAgICByZXR1cm4gaW5zLmluaXQoaW5pdE9wcywgKGVycikgPT4ge1xyXG4gICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmVycm9yKGBJbml0IGRlZmF1bHQgaTE4biBpbnN0YW5jZSBlcnJvcjogJHtlcnJ9YClcclxuICAgIH0pXHJcbn1cclxuIl19