"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLanguage = getDefaultLanguage;
exports.getDefaultCurrencySymbol = getDefaultCurrencySymbol;
exports.getLanguageNodeData = getLanguageNodeData;
exports.createOrInitI18nInstance = createOrInitI18nInstance;
exports.LanguageTypeEnumList = exports.LanguageTypeEnum = void 0;

var _enumTool = require("../common/enumTool");

var _data = require("../common/data");

var LanguageTypeEnum;
exports.LanguageTypeEnum = LanguageTypeEnum;

(function (LanguageTypeEnum) {
  LanguageTypeEnum["\u7B80\u4F53\u4E2D\u6587"] = "zh-CN";
  LanguageTypeEnum["\u7E41\u9AD4\u4E2D\u6587"] = "zh-TW";
  LanguageTypeEnum["English"] = "en-US";
  LanguageTypeEnum["Fran\xE7ais"] = "fr-FR";
  LanguageTypeEnum["Deutsch"] = "de-DE";
  LanguageTypeEnum["Espa\xF1ol"] = "es-ES";
  LanguageTypeEnum["\u65E5\u672C\u8A9E"] = "ja-JP";
  LanguageTypeEnum["\uD55C\uAD6D\uC5B4"] = "ko-KR";
})(LanguageTypeEnum || (exports.LanguageTypeEnum = LanguageTypeEnum = {}));

var LanguageTypeEnumList = (0, _enumTool.convertEnumToList)(LanguageTypeEnum);
/**
 * 获取默认语言
 */

exports.LanguageTypeEnumList = LanguageTypeEnumList;

function getDefaultLanguage(isChina) {
  return isChina ? LanguageTypeEnum.简体中文 : LanguageTypeEnum.English;
}
/**
 * 获取默认的货币符号
 */


function getDefaultCurrencySymbol(isChina) {
  return isChina ? "¥" : "$";
}
/**
 * 获取指定对象中的某个语言节点中的数据
 */


function getLanguageNodeData(data, isChina, lang) {
  if (!data) {
    return null;
  } //如果是字符串，则直接返回原数据即可


  if ((0, _data.isString)(data)) {
    return data;
  }

  return data[lang] || data[getDefaultLanguage(isChina)];
}
/**
 * 创建或初始化 i18n 实例。注意：defaultInstance、initReact 必须作为参数由具体使用的项目传过来，因为每个项目的默认实例不一样
 */


function createOrInitI18nInstance(isCreateNewInstance, defaultInstance, initReact, isChina, lang, transData) {
  var defaultLang = getDefaultLanguage(isChina);
  var currentLang = lang && (0, _enumTool.isValueInEnum)(LanguageTypeEnum, lang) ? lang : defaultLang;
  var initOps = {
    lng: currentLang,
    supportedLngs: LanguageTypeEnumList.map(function (k) {
      return k.value;
    }),
    fallbackLng: defaultLang,
    interpolation: {
      escapeValue: false
    },
    resources: transData
  };
  var ins = initReact ? defaultInstance.use(initReact) : defaultInstance; //创建新的 i18n 实例

  if (isCreateNewInstance) {
    return ins.createInstance(initOps, function (err) {
      //此函数必须有，否则报错
      if (!err) {
        return;
      }

      console.error("Create new i18n instance error: ".concat(err));
    });
  } //初始化默认实例


  return ins.init(initOps, function (err) {
    if (!err) {
      return;
    }

    console.error("Init default i18n instance error: ".concat(err));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pMThuL2luZGV4LnRzIl0sIm5hbWVzIjpbIkxhbmd1YWdlVHlwZUVudW0iLCJMYW5ndWFnZVR5cGVFbnVtTGlzdCIsImdldERlZmF1bHRMYW5ndWFnZSIsImlzQ2hpbmEiLCLnroDkvZPkuK3mlociLCJFbmdsaXNoIiwiZ2V0RGVmYXVsdEN1cnJlbmN5U3ltYm9sIiwiZ2V0TGFuZ3VhZ2VOb2RlRGF0YSIsImRhdGEiLCJsYW5nIiwiY3JlYXRlT3JJbml0STE4bkluc3RhbmNlIiwiaXNDcmVhdGVOZXdJbnN0YW5jZSIsImRlZmF1bHRJbnN0YW5jZSIsImluaXRSZWFjdCIsInRyYW5zRGF0YSIsImRlZmF1bHRMYW5nIiwiY3VycmVudExhbmciLCJpbml0T3BzIiwibG5nIiwic3VwcG9ydGVkTG5ncyIsIm1hcCIsImsiLCJ2YWx1ZSIsImZhbGxiYWNrTG5nIiwiaW50ZXJwb2xhdGlvbiIsImVzY2FwZVZhbHVlIiwicmVzb3VyY2VzIiwiaW5zIiwidXNlIiwiY3JlYXRlSW5zdGFuY2UiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJpbml0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztJQUVZQSxnQjs7O1dBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0dBQUFBLGdCLGdDQUFBQSxnQjs7QUFVTCxJQUFNQyxvQkFBb0IsR0FBRyxpQ0FBa0JELGdCQUFsQixDQUE3QjtBQUVQO0FBQ0E7QUFDQTs7OztBQUNPLFNBQVNFLGtCQUFULENBQTRCQyxPQUE1QixFQUE4QztBQUNqRCxTQUFPQSxPQUFPLEdBQUdILGdCQUFnQixDQUFDSSxJQUFwQixHQUEyQkosZ0JBQWdCLENBQUNLLE9BQTFEO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLHdCQUFULENBQWtDSCxPQUFsQyxFQUFvRDtBQUN2RCxTQUFPQSxPQUFPLEdBQUcsR0FBSCxHQUFTLEdBQXZCO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7OztBQUNPLFNBQVNJLG1CQUFULENBQWdDQyxJQUFoQyxFQUE0RUwsT0FBNUUsRUFBOEZNLElBQTlGLEVBQXNIO0FBQ3pILE1BQUksQ0FBQ0QsSUFBTCxFQUFXO0FBQ1AsV0FBTyxJQUFQO0FBQ0gsR0FId0gsQ0FJekg7OztBQUNBLE1BQUksb0JBQVNBLElBQVQsQ0FBSixFQUFvQjtBQUNoQixXQUFPQSxJQUFQO0FBQ0g7O0FBQ0QsU0FBUUEsSUFBRCxDQUFzQ0MsSUFBdEMsS0FBZ0RELElBQUQsQ0FBc0NOLGtCQUFrQixDQUFDQyxPQUFELENBQXhELENBQXREO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7OztBQUNPLFNBQVNPLHdCQUFULENBQWtDQyxtQkFBbEMsRUFBZ0VDLGVBQWhFLEVBQXVGQyxTQUF2RixFQUFvSFYsT0FBcEgsRUFBc0lNLElBQXRJLEVBQThKSyxTQUE5SixFQUFtTDtBQUN0TCxNQUFNQyxXQUFXLEdBQUdiLGtCQUFrQixDQUFDQyxPQUFELENBQXRDO0FBQ0EsTUFBTWEsV0FBVyxHQUFHUCxJQUFJLElBQUksNkJBQWNULGdCQUFkLEVBQWdDUyxJQUFoQyxDQUFSLEdBQWdEQSxJQUFoRCxHQUF1RE0sV0FBM0U7QUFFQSxNQUFNRSxPQUFvQixHQUFHO0FBQ3pCQyxJQUFBQSxHQUFHLEVBQUVGLFdBRG9CO0FBRXpCRyxJQUFBQSxhQUFhLEVBQUVsQixvQkFBb0IsQ0FBQ21CLEdBQXJCLENBQXlCLFVBQUNDLENBQUQ7QUFBQSxhQUFPQSxDQUFDLENBQUNDLEtBQVQ7QUFBQSxLQUF6QixDQUZVO0FBR3pCQyxJQUFBQSxXQUFXLEVBQUVSLFdBSFk7QUFJekJTLElBQUFBLGFBQWEsRUFBRTtBQUNYQyxNQUFBQSxXQUFXLEVBQUU7QUFERixLQUpVO0FBT3pCQyxJQUFBQSxTQUFTLEVBQUVaO0FBUGMsR0FBN0I7QUFVQSxNQUFNYSxHQUFHLEdBQUdkLFNBQVMsR0FBR0QsZUFBZSxDQUFDZ0IsR0FBaEIsQ0FBb0JmLFNBQXBCLENBQUgsR0FBb0NELGVBQXpELENBZHNMLENBZ0J0TDs7QUFDQSxNQUFJRCxtQkFBSixFQUF5QjtBQUNyQixXQUFPZ0IsR0FBRyxDQUFDRSxjQUFKLENBQW1CWixPQUFuQixFQUE0QixVQUFDYSxHQUFELEVBQVM7QUFDeEM7QUFDQSxVQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNOO0FBQ0g7O0FBQ0RDLE1BQUFBLE9BQU8sQ0FBQ0MsS0FBUiwyQ0FBaURGLEdBQWpEO0FBQ0gsS0FOTSxDQUFQO0FBT0gsR0F6QnFMLENBMkJ0TDs7O0FBQ0EsU0FBT0gsR0FBRyxDQUFDTSxJQUFKLENBQVNoQixPQUFULEVBQWtCLFVBQUNhLEdBQUQsRUFBUztBQUM5QixRQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNOO0FBQ0g7O0FBQ0RDLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUiw2Q0FBbURGLEdBQW5EO0FBQ0gsR0FMTSxDQUFQO0FBTUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpMThuLCBJbml0T3B0aW9ucywgUmVzb3VyY2UsIFRoaXJkUGFydHlNb2R1bGUgfSBmcm9tIFwiaTE4bmV4dFwiXHJcbmltcG9ydCB7IGNvbnZlcnRFbnVtVG9MaXN0LCBpc1ZhbHVlSW5FbnVtIH0gZnJvbSBcIi4uL2NvbW1vbi9lbnVtVG9vbFwiXHJcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2NvbW1vbi9kYXRhXCJcclxuXHJcbmV4cG9ydCBlbnVtIExhbmd1YWdlVHlwZUVudW0ge1xyXG4gICAg566A5L2T5Lit5paHID0gXCJ6aC1DTlwiLFxyXG4gICAg57mB6auU5Lit5paHID0gXCJ6aC1UV1wiLFxyXG4gICAgRW5nbGlzaCA9IFwiZW4tVVNcIixcclxuICAgIEZyYW7Dp2FpcyA9IFwiZnItRlJcIixcclxuICAgIERldXRzY2ggPSBcImRlLURFXCIsXHJcbiAgICBFc3Bhw7FvbCA9IFwiZXMtRVNcIixcclxuICAgIOaXpeacrOiqniA9IFwiamEtSlBcIixcclxuICAgIO2VnOq1reyWtCA9IFwia28tS1JcIlxyXG59XHJcbmV4cG9ydCBjb25zdCBMYW5ndWFnZVR5cGVFbnVtTGlzdCA9IGNvbnZlcnRFbnVtVG9MaXN0KExhbmd1YWdlVHlwZUVudW0pXHJcblxyXG4vKipcclxuICog6I635Y+W6buY6K6k6K+t6KiAXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdExhbmd1YWdlKGlzQ2hpbmE6IGJvb2xlYW4pIHtcclxuICAgIHJldHVybiBpc0NoaW5hID8gTGFuZ3VhZ2VUeXBlRW51bS7nroDkvZPkuK3mlocgOiBMYW5ndWFnZVR5cGVFbnVtLkVuZ2xpc2hcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPlum7mOiupOeahOi0p+W4geespuWPt1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRDdXJyZW5jeVN5bWJvbChpc0NoaW5hOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gaXNDaGluYSA/IFwiwqVcIiA6IFwiJFwiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDojrflj5bmjIflrprlr7nosaHkuK3nmoTmn5DkuKror63oqIDoioLngrnkuK3nmoTmlbDmja5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMYW5ndWFnZU5vZGVEYXRhPFQ+KGRhdGE6IHN0cmluZyB8IFJlY29yZDxMYW5ndWFnZVR5cGVFbnVtLCBUPiwgaXNDaGluYTogYm9vbGVhbiwgbGFuZzogTGFuZ3VhZ2VUeXBlRW51bSkge1xyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICAgIC8v5aaC5p6c5piv5a2X56ym5Liy77yM5YiZ55u05o6l6L+U5Zue5Y6f5pWw5o2u5Y2z5Y+vXHJcbiAgICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChkYXRhIGFzIFJlY29yZDxMYW5ndWFnZVR5cGVFbnVtLCBUPilbbGFuZ10gfHwgKGRhdGEgYXMgUmVjb3JkPExhbmd1YWdlVHlwZUVudW0sIFQ+KVtnZXREZWZhdWx0TGFuZ3VhZ2UoaXNDaGluYSldXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDliJvlu7rmiJbliJ3lp4vljJYgaTE4biDlrp7kvovjgILms6jmhI/vvJpkZWZhdWx0SW5zdGFuY2XjgIFpbml0UmVhY3Qg5b+F6aG75L2c5Li65Y+C5pWw55Sx5YW35L2T5L2/55So55qE6aG555uu5Lyg6L+H5p2l77yM5Zug5Li65q+P5Liq6aG555uu55qE6buY6K6k5a6e5L6L5LiN5LiA5qC3XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3JJbml0STE4bkluc3RhbmNlKGlzQ3JlYXRlTmV3SW5zdGFuY2U6IGJvb2xlYW4sIGRlZmF1bHRJbnN0YW5jZTogaTE4biwgaW5pdFJlYWN0OiBUaGlyZFBhcnR5TW9kdWxlLCBpc0NoaW5hOiBib29sZWFuLCBsYW5nOiBMYW5ndWFnZVR5cGVFbnVtLCB0cmFuc0RhdGE6IFJlc291cmNlKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0TGFuZyA9IGdldERlZmF1bHRMYW5ndWFnZShpc0NoaW5hKVxyXG4gICAgY29uc3QgY3VycmVudExhbmcgPSBsYW5nICYmIGlzVmFsdWVJbkVudW0oTGFuZ3VhZ2VUeXBlRW51bSwgbGFuZykgPyBsYW5nIDogZGVmYXVsdExhbmdcclxuXHJcbiAgICBjb25zdCBpbml0T3BzOiBJbml0T3B0aW9ucyA9IHtcclxuICAgICAgICBsbmc6IGN1cnJlbnRMYW5nLFxyXG4gICAgICAgIHN1cHBvcnRlZExuZ3M6IExhbmd1YWdlVHlwZUVudW1MaXN0Lm1hcCgoaykgPT4gay52YWx1ZSksXHJcbiAgICAgICAgZmFsbGJhY2tMbmc6IGRlZmF1bHRMYW5nLFxyXG4gICAgICAgIGludGVycG9sYXRpb246IHtcclxuICAgICAgICAgICAgZXNjYXBlVmFsdWU6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNvdXJjZXM6IHRyYW5zRGF0YVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlucyA9IGluaXRSZWFjdCA/IGRlZmF1bHRJbnN0YW5jZS51c2UoaW5pdFJlYWN0KSA6IGRlZmF1bHRJbnN0YW5jZVxyXG5cclxuICAgIC8v5Yib5bu65paw55qEIGkxOG4g5a6e5L6LXHJcbiAgICBpZiAoaXNDcmVhdGVOZXdJbnN0YW5jZSkge1xyXG4gICAgICAgIHJldHVybiBpbnMuY3JlYXRlSW5zdGFuY2UoaW5pdE9wcywgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAvL+atpOWHveaVsOW/hemhu+acie+8jOWQpuWImeaKpemUmVxyXG4gICAgICAgICAgICBpZiAoIWVycikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ3JlYXRlIG5ldyBpMThuIGluc3RhbmNlIGVycm9yOiAke2Vycn1gKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy/liJ3lp4vljJbpu5jorqTlrp7kvotcclxuICAgIHJldHVybiBpbnMuaW5pdChpbml0T3BzLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEluaXQgZGVmYXVsdCBpMThuIGluc3RhbmNlIGVycm9yOiAke2Vycn1gKVxyXG4gICAgfSlcclxufVxyXG4iXX0=