"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLanguage = getDefaultLanguage;
exports.createOrInitI18nInstance = createOrInitI18nInstance;
exports.LanguageTypeEnumList = exports.LanguageTypeEnum = void 0;

var _enumTool = require("../common/enumTool");

var LanguageTypeEnum;
exports.LanguageTypeEnum = LanguageTypeEnum;

(function (LanguageTypeEnum) {
  LanguageTypeEnum["\u7B80\u4F53\u4E2D\u6587"] = "zh-CN";
  LanguageTypeEnum["\u7E41\u9AD4\u4E2D\u6587"] = "zh-TW";
  LanguageTypeEnum["English"] = "en-US";
  LanguageTypeEnum["Fran\xE7ais"] = "fr-FR";
  LanguageTypeEnum["Deutsch"] = "de-DE";
  LanguageTypeEnum["Espa\xF1ol"] = "es-ES";
  LanguageTypeEnum["\u65E5\u672C\u8A9E"] = "ja-JP";
  LanguageTypeEnum["\uD55C\uAD6D\uC5B4"] = "ko-KR";
})(LanguageTypeEnum || (exports.LanguageTypeEnum = LanguageTypeEnum = {}));

var LanguageTypeEnumList = (0, _enumTool.convertEnumToList)(LanguageTypeEnum);
/**
 * 获取默认语言
 */

exports.LanguageTypeEnumList = LanguageTypeEnumList;

function getDefaultLanguage(isChina) {
  return isChina ? LanguageTypeEnum.简体中文 : LanguageTypeEnum.English;
}
/**
 * 创建或初始化 i18n 实例。注意：defaultInstance、initReact 必须作为参数由具体使用的项目传过来，因为每个项目的默认实例不一样
 */


function createOrInitI18nInstance(isCreateNewInstance, defaultInstance, initReact, isChina, lang, transData) {
  var initOps = {
    lng: lang,
    supportedLngs: LanguageTypeEnumList.map(function (k) {
      return k.value;
    }),
    fallbackLng: getDefaultLanguage(isChina),
    interpolation: {
      escapeValue: false
    },
    resources: transData
  };
  var ins = initReact ? defaultInstance.use(initReact) : defaultInstance; //创建新的 i18n 实例

  if (isCreateNewInstance) {
    return ins.createInstance(initOps, function (err) {
      //此函数必须有，否则报错
      if (!err) {
        return;
      }

      console.error("Create new i18n instance error: ".concat(err));
    });
  } //初始化默认实例


  return ins.init(initOps, function (err) {
    if (!err) {
      return;
    }

    console.error("Init default i18n instance error: ".concat(err));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pMThuL2luZGV4LnRzIl0sIm5hbWVzIjpbIkxhbmd1YWdlVHlwZUVudW0iLCJMYW5ndWFnZVR5cGVFbnVtTGlzdCIsImdldERlZmF1bHRMYW5ndWFnZSIsImlzQ2hpbmEiLCLnroDkvZPkuK3mlociLCJFbmdsaXNoIiwiY3JlYXRlT3JJbml0STE4bkluc3RhbmNlIiwiaXNDcmVhdGVOZXdJbnN0YW5jZSIsImRlZmF1bHRJbnN0YW5jZSIsImluaXRSZWFjdCIsImxhbmciLCJ0cmFuc0RhdGEiLCJpbml0T3BzIiwibG5nIiwic3VwcG9ydGVkTG5ncyIsIm1hcCIsImsiLCJ2YWx1ZSIsImZhbGxiYWNrTG5nIiwiaW50ZXJwb2xhdGlvbiIsImVzY2FwZVZhbHVlIiwicmVzb3VyY2VzIiwiaW5zIiwidXNlIiwiY3JlYXRlSW5zdGFuY2UiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJpbml0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTs7SUFFWUEsZ0I7OztXQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtHQUFBQSxnQixnQ0FBQUEsZ0I7O0FBVUwsSUFBTUMsb0JBQW9CLEdBQUcsaUNBQWtCRCxnQkFBbEIsQ0FBN0I7QUFFUDtBQUNBO0FBQ0E7Ozs7QUFDTyxTQUFTRSxrQkFBVCxDQUE0QkMsT0FBNUIsRUFBOEM7QUFDakQsU0FBT0EsT0FBTyxHQUFHSCxnQkFBZ0IsQ0FBQ0ksSUFBcEIsR0FBMkJKLGdCQUFnQixDQUFDSyxPQUExRDtBQUNIO0FBRUQ7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyx3QkFBVCxDQUFrQ0MsbUJBQWxDLEVBQWdFQyxlQUFoRSxFQUE4RkMsU0FBOUYsRUFBMkhOLE9BQTNILEVBQTZJTyxJQUE3SSxFQUFxS0MsU0FBckssRUFBMEw7QUFDN0wsTUFBTUMsT0FBb0IsR0FBRztBQUN6QkMsSUFBQUEsR0FBRyxFQUFFSCxJQURvQjtBQUV6QkksSUFBQUEsYUFBYSxFQUFFYixvQkFBb0IsQ0FBQ2MsR0FBckIsQ0FBeUIsVUFBQ0MsQ0FBRDtBQUFBLGFBQU9BLENBQUMsQ0FBQ0MsS0FBVDtBQUFBLEtBQXpCLENBRlU7QUFHekJDLElBQUFBLFdBQVcsRUFBRWhCLGtCQUFrQixDQUFDQyxPQUFELENBSE47QUFJekJnQixJQUFBQSxhQUFhLEVBQUU7QUFDWEMsTUFBQUEsV0FBVyxFQUFFO0FBREYsS0FKVTtBQU96QkMsSUFBQUEsU0FBUyxFQUFFVjtBQVBjLEdBQTdCO0FBVUEsTUFBTVcsR0FBRyxHQUFHYixTQUFTLEdBQUdELGVBQWUsQ0FBQ2UsR0FBaEIsQ0FBb0JkLFNBQXBCLENBQUgsR0FBb0NELGVBQXpELENBWDZMLENBYTdMOztBQUNBLE1BQUlELG1CQUFKLEVBQXlCO0FBQ3JCLFdBQU9lLEdBQUcsQ0FBQ0UsY0FBSixDQUFtQlosT0FBbkIsRUFBNEIsVUFBQ2EsR0FBRCxFQUFTO0FBQ3hDO0FBQ0EsVUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDTjtBQUNIOztBQUNEQyxNQUFBQSxPQUFPLENBQUNDLEtBQVIsMkNBQWlERixHQUFqRDtBQUNILEtBTk0sQ0FBUDtBQU9ILEdBdEI0TCxDQXdCN0w7OztBQUNBLFNBQU9ILEdBQUcsQ0FBQ00sSUFBSixDQUFTaEIsT0FBVCxFQUFrQixVQUFDYSxHQUFELEVBQVM7QUFDOUIsUUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDTjtBQUNIOztBQUNEQyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsNkNBQW1ERixHQUFuRDtBQUNILEdBTE0sQ0FBUDtBQU1IIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGkxOG4sIHsgSW5pdE9wdGlvbnMsIFJlc291cmNlLCBUaGlyZFBhcnR5TW9kdWxlIH0gZnJvbSBcImkxOG5leHRcIlxyXG5pbXBvcnQgeyBjb252ZXJ0RW51bVRvTGlzdCB9IGZyb20gXCIuLi9jb21tb24vZW51bVRvb2xcIlxyXG5cclxuZXhwb3J0IGVudW0gTGFuZ3VhZ2VUeXBlRW51bSB7XHJcbiAgICDnroDkvZPkuK3mlocgPSBcInpoLUNOXCIsXHJcbiAgICDnuYHpq5TkuK3mlocgPSBcInpoLVRXXCIsXHJcbiAgICBFbmdsaXNoID0gXCJlbi1VU1wiLFxyXG4gICAgRnJhbsOnYWlzID0gXCJmci1GUlwiLFxyXG4gICAgRGV1dHNjaCA9IFwiZGUtREVcIixcclxuICAgIEVzcGHDsW9sID0gXCJlcy1FU1wiLFxyXG4gICAg5pel5pys6KqeID0gXCJqYS1KUFwiLFxyXG4gICAg7ZWc6rWt7Ja0ID0gXCJrby1LUlwiXHJcbn1cclxuZXhwb3J0IGNvbnN0IExhbmd1YWdlVHlwZUVudW1MaXN0ID0gY29udmVydEVudW1Ub0xpc3QoTGFuZ3VhZ2VUeXBlRW51bSlcclxuXHJcbi8qKlxyXG4gKiDojrflj5bpu5jorqTor63oqIBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TGFuZ3VhZ2UoaXNDaGluYTogYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIGlzQ2hpbmEgPyBMYW5ndWFnZVR5cGVFbnVtLueugOS9k+S4reaWhyA6IExhbmd1YWdlVHlwZUVudW0uRW5nbGlzaFxyXG59XHJcblxyXG4vKipcclxuICog5Yib5bu65oiW5Yid5aeL5YyWIGkxOG4g5a6e5L6L44CC5rOo5oSP77yaZGVmYXVsdEluc3RhbmNl44CBaW5pdFJlYWN0IOW/hemhu+S9nOS4uuWPguaVsOeUseWFt+S9k+S9v+eUqOeahOmhueebruS8oOi/h+adpe+8jOWboOS4uuavj+S4qumhueebrueahOm7mOiupOWunuS+i+S4jeS4gOagt1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9ySW5pdEkxOG5JbnN0YW5jZShpc0NyZWF0ZU5ld0luc3RhbmNlOiBib29sZWFuLCBkZWZhdWx0SW5zdGFuY2U6IHR5cGVvZiBpMThuLCBpbml0UmVhY3Q6IFRoaXJkUGFydHlNb2R1bGUsIGlzQ2hpbmE6IGJvb2xlYW4sIGxhbmc6IExhbmd1YWdlVHlwZUVudW0sIHRyYW5zRGF0YTogUmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IGluaXRPcHM6IEluaXRPcHRpb25zID0ge1xyXG4gICAgICAgIGxuZzogbGFuZyxcclxuICAgICAgICBzdXBwb3J0ZWRMbmdzOiBMYW5ndWFnZVR5cGVFbnVtTGlzdC5tYXAoKGspID0+IGsudmFsdWUpLFxyXG4gICAgICAgIGZhbGxiYWNrTG5nOiBnZXREZWZhdWx0TGFuZ3VhZ2UoaXNDaGluYSksXHJcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xyXG4gICAgICAgICAgICBlc2NhcGVWYWx1ZTogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc291cmNlczogdHJhbnNEYXRhXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5zID0gaW5pdFJlYWN0ID8gZGVmYXVsdEluc3RhbmNlLnVzZShpbml0UmVhY3QpIDogZGVmYXVsdEluc3RhbmNlXHJcblxyXG4gICAgLy/liJvlu7rmlrDnmoQgaTE4biDlrp7kvotcclxuICAgIGlmIChpc0NyZWF0ZU5ld0luc3RhbmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGlucy5jcmVhdGVJbnN0YW5jZShpbml0T3BzLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIC8v5q2k5Ye95pWw5b+F6aG75pyJ77yM5ZCm5YiZ5oql6ZSZXHJcbiAgICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDcmVhdGUgbmV3IGkxOG4gaW5zdGFuY2UgZXJyb3I6ICR7ZXJyfWApXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL+WIneWni+WMlum7mOiupOWunuS+i1xyXG4gICAgcmV0dXJuIGlucy5pbml0KGluaXRPcHMsIChlcnIpID0+IHtcclxuICAgICAgICBpZiAoIWVycikge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW5pdCBkZWZhdWx0IGkxOG4gaW5zdGFuY2UgZXJyb3I6ICR7ZXJyfWApXHJcbiAgICB9KVxyXG59XHJcbiJdfQ==