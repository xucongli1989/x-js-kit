{"version":3,"sources":["webpack://x-js-kit/webpack/universalModuleDefinition","webpack://x-js-kit/./src/constant/regex.ts","webpack://x-js-kit/./src/common/regexp.ts","webpack://x-js-kit/./src/constant/map.ts","webpack://x-js-kit/./src/entity/method-result.ts","webpack://x-js-kit/./src/common/convert.ts","webpack://x-js-kit/./src/common/string.ts","webpack://x-js-kit/./src/common/data.ts","webpack://x-js-kit/./src/common/lib.ts","webpack://x-js-kit/./src/cache/localStorage.ts","webpack://x-js-kit/./src/cache/index.ts","webpack://x-js-kit/./src/device/browser.ts","webpack://x-js-kit/./src/check/common.ts","webpack://x-js-kit/./src/check/url.ts","webpack://x-js-kit/./src/check/browser.ts","webpack://x-js-kit/./src/check/index.ts","webpack://x-js-kit/./src/common/array.ts","webpack://x-js-kit/./src/common/cookie.ts","webpack://x-js-kit/./src/common/json.ts","webpack://x-js-kit/./src/common/enumTool.ts","webpack://x-js-kit/./src/entity/idCard.ts","webpack://x-js-kit/./src/common/idCard.ts","webpack://x-js-kit/./src/common/image.ts","webpack://x-js-kit/./src/common/random.ts","webpack://x-js-kit/./src/entity/keyValue.ts","webpack://x-js-kit/./src/common/url.ts","webpack://x-js-kit/./src/common/dom.ts","webpack://x-js-kit/./src/common/index.ts","webpack://x-js-kit/./src/recorder/log.ts","webpack://x-js-kit/./src/config/index.ts","webpack://x-js-kit/./src/constant/index.ts","webpack://x-js-kit/./src/date/format.ts","webpack://x-js-kit/./src/date/convert.ts","webpack://x-js-kit/./src/date/index.ts","webpack://x-js-kit/./src/declaration/index.ts","webpack://x-js-kit/./src/device/index.ts","webpack://x-js-kit/./src/entity/select.ts","webpack://x-js-kit/./src/entity/serialize.ts","webpack://x-js-kit/./src/recorder/dom.ts","webpack://x-js-kit/./src/entity/message.ts","webpack://x-js-kit/./src/entity/index.ts","webpack://x-js-kit/./src/recorder/index.ts","webpack://x-js-kit/./src/pattern/strategy.ts","webpack://x-js-kit/./src/pattern/singleton.ts","webpack://x-js-kit/./src/pattern/index.ts","webpack://x-js-kit/./src/timer/stopWatch.ts","webpack://x-js-kit/./src/timer/index.ts","webpack://x-js-kit/./src/validation/fieldMessage.ts","webpack://x-js-kit/./src/file/path.ts","webpack://x-js-kit/./src/file/index.ts","webpack://x-js-kit/./src/index.ts","webpack://x-js-kit/./src/validation/index.ts","webpack://x-js-kit/webpack/bootstrap","webpack://x-js-kit/webpack/startup","webpack://x-js-kit/webpack/runtime/define property getters","webpack://x-js-kit/webpack/runtime/global","webpack://x-js-kit/webpack/runtime/hasOwnProperty shorthand","webpack://x-js-kit/webpack/runtime/make namespace object","webpack://x-js-kit/webpack/runtime/hot module replacement"],"names":["root","factory","exports","module","define","amd","a","i","this","email","allEnglish","allNumber","http","https","httpOrHttps","partNumber","cnMobile","htmlLeftRightBlank","chinaIDCard","chineseChar","escapeReg","str","replace","htmlEntityMap","MethodResult","undefined","toIntDefault","val","defaultValue","result","parseInt","isNaN","toInt","toIntNull","toFloatDefault","parseFloat","toFloat","toFloatNull","splitString","stepCharCount","strLen","length","startIndex","push","substr","ellipsis","len","ellipsisChars","substring","getNumber","mt","match","trim","lTrim","rTrim","lTrimString","strToRemove","isIgnoreCase","RegExp","rTrimString","trimString","trimHTML","html","test","equalsIgnoreCase","b","toUpperCase","equalsIgnoreCaseAndTrim","contains","source","search","sourceStr","includes","escapeHtml","String","s","repeat","repeatCount","count","join","Builder","_arr","toString","builder","format","token","removeBlankLines","replaceNewlineToBr","getChineseWord","combineStr","separator","subStrs","filter","k","isRangeText","msg","isSuccess","message","itemReg","split","arr","isNull","obj","isArray","Object","prototype","call","isNumber","isObject","isNullOrEmpty","isUndefined","isNullOrWhiteSpace","isFunction","isString","isBoolean","isUpper","isLower","toLowerCase","isDate","isError","Error","isIn","value","args","isInIgnoreCase","find","defaultTryRunErrorHandler","isServer","window","isBowser","isProduction","g","getGlobalObject","process","env","NODE_ENV","isDevelopment","global","globalObject","getDocument","document","getLocalStorage","localStorage","getSymbol","desc","Symbol","createNamespace","name","tokens","shift","getValue","path","temp","forEach","keyName","e","deepClone","JSON","parse","stringify","tryRun","fn","setTryRunErrorHandler","mergeObjectAndCombineSameFunc","target","sources","reduce","preItem","currentItem","pre","cur","keys","key","preValue","currentValue","isPreValueFunction","isCurrentValueFunction","clearExpiredIntervalId","globalCacheName","autoClearExpiredTimeSpan","isInited","getStore","store","getItem","defaultGlobalLocalStorage","time","Date","valueOf","items","setItem","clearExpired","runClearExpiredInterval","getGlobalCache","cacheValue","setGlobalCacheName","oldValue","removeItem","add","cache","remove","get","ignoreExpireCheck","item","expire","ch","clearInterval","setInterval","getAutoClearExpiredTimeSpan","setAutoClearExpiredTimeSpan","timeSpan","BrowserWidthTypeEnum","isEmail","regexConst","isAllEnglish","isAllNumber","isCNMobile","isChinaIDCard","isAlphaNumericKeyCode","keyCode","hasChineseWord","isHttp","url","isHttps","isHttpOrHttpsUrl","size","width","height","getWidthType","ExtraSmall","Small","Medium","Large","ExtraLarge","isIE","version","userAgent","ua","navigator","isExtraSmall","isSmall","isMedium","isLarge","isExtraLarge","isReload","performance","navigation","type","common","browser","splitArray","stepCount","arrLen","newArray","maxCount","Math","ceil","slice","unique","Array","from","Set","union","arr1","arr2","a2","intersect","x","diff","a1","diff1","diff2","map","createNumberArray","startValue","endValue","step","stepValue","isNotNullOrEmpty","isAnyNullOrEmpty","arrs","some","isAnyNotNullOrEmpty","isAllNullOrEmpty","every","isAllNotNullOrEmpty","sKey","decodeURIComponent","encodeURIComponent","sValue","vEnd","sPath","sDomain","bSecure","sExpires","constructor","Number","Infinity","toUTCString","hasItem","aKeys","nIdx","hasKey","json","hasValue","keyValue","r","toParams","m","toObject","convertEnumToList","em","lst","CNIDCardEntity","toCNIDCardEntity","birthday","ImageSrcReg","replaceImgSrc","newAttrName","_id","create","random","padEnd","uuid","d","getTime","c","floor","range","min","max","id","KeyValue","extend","KeyNameValue","splitUrlByQueryInfo","questionMarkIndex","lastIndexOf","wellNumberMarkIndex","indexOf","hostPart","queryPart","hashPart","mergeUrlBySplitQueryInfo","splitInfo","convertQueryStringToKeyValueArray","queryString","has","convertKeyValueArrayToQueryString","appendQueryString","urlQueryKeyValue","queryInfo","getUrlParameter","paramName","results","exec","appendElementToLimitContainer","containerElement","subElement","ellipsisElement","isInsertToStart","conEle","firstChild","insertBefore","appendChild","_x_js_kit_limit_edge_index","_x_js_kit_limit_inserted_ellipsis","childNodes","removeChild","isOverflow","childLength","LevelTypeEnum","string","array","convert","cookie","data","enumTool","idCard","image","lib","regexp","dom","defaultLogRecorder","content","option","console","info","Promise","resolve","warn","error","getLogRecorder","level","isAsync","fun","infoAsync","warnAsync","errorAsync","logger","logFunc","write","writeAsync","setLoggerRecorder","logRecorder","recorder","toHourStringFromMins","mins","h","dateValue","fmtStr","fmt","dt","o","getMonth","getDate","getHours","getMinutes","getSeconds","S","getMilliseconds","$1","getFullYear","msPerYear","msPerMonth","msPerDay","msPerHour","msPerMin","msPerSec","toEntity","model","year","month","day","hour","second","millisecond","week","getDay","toCounterEntity","ms","dateStr","date","mts","SelectItem","text","isSelected","BaseClass","jsonObj","proto","getPrototypeOf","getOwnPropertyNames","getOwnPropertyDescriptor","KeyTypeEnum","MessageHead","MessageBody","MessageEntity","select","serialize","methodResult","DOMDataRecorder","win","location","href","refer","attrKeyName","attrPrefix","attrTypeName","attrValueName","eles","node","getAttribute","hasAttribute","txt","innerHTML","innerText","log","StrategyItem","context","handler","Strategy","_strategyList","classIdSymbol","getInstance","ClassName","newObj","defineProperty","strategy","singleton","StopWatch","_value","_startFlag","_stopFlag","_date","stopWatch","FieldMessageItem","ops","fieldItems","isShowAll","isShow","oldShowValue","oldItem","needShowFields","unNeedShowFields","FieldMessageModel","isPassed","itemList","getFileName","splitIndex","getFileNameWithoutExt","fileName","dotIndex","getExt","getExtWithoutDot","check","config","constant","declaration","device","entity","pattern","timer","validation","fieldMessage","file","__webpack_module_cache__","__webpack_require__","moduleId","execOptions","__webpack_modules__","require","definition","enumerable","globalThis","Function","prop","hasOwnProperty","toStringTag","currentChildModule","blockingPromises","currentUpdateApplyHandlers","queuedInvalidatedModules","currentModuleData","installedModules","currentParents","registeredStatusHandlers","currentStatus","setStatus","newStatus","waitForBlockingPromises","blocker","all","then","hotCheck","applyOnUpdate","hmrM","update","applyInvalidatedModules","updatedModules","hmrC","promises","internalApply","hotApply","options","errors","Boolean","dispose","reportError","err","outdatedModules","apply","modules","list","hmrI","hmrD","me","hot","request","active","parents","children","createPropertyDescriptor","configurable","set","chunkId","promise","trackBlockingPromise","createRequire","_acceptedDependencies","_declinedDependencies","_selfAccepted","_selfDeclined","_selfInvalidated","_disposeHandlers","_main","_requireSelf","accept","dep","callback","decline","addDisposeHandler","removeDisposeHandler","idx","splice","invalidate","status","l","addStatusHandler","removeStatusHandler"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/**\r\n * 完整的电子邮箱地址（不区分大小写）\r\n */\r\nexport const email = /^\\w+((-\\w+)|(\\.\\w+))*@[a-z0-9]+((\\.|-)[a-z0-9]+)*\\.[a-z0-9]+$/i\r\n/**\r\n * 全部是英文字母\r\n */\r\nexport const allEnglish = /^[a-zA-Z]+$/\r\n/**\r\n * 全部是数字\r\n */\r\nexport const allNumber = /^[0-9]+$/\r\n/**\r\n * 以【http://】开头（不区分大小写）\r\n */\r\nexport const http = /^http:\\/\\//i\r\n/**\r\n * 以【https://】开头（不区分大小写）\r\n */\r\nexport const https = /^https:\\/\\//i\r\n/**\r\n * 以【http://】或【https://】开头（不区分大小写）\r\n */\r\nexport const httpOrHttps = /^https?:\\/\\//i\r\n/**\r\n * 包含整数或浮点数\r\n */\r\nexport const partNumber = /\\d+(\\.\\d+)?/\r\n/**\r\n * 中国大陆手机号\r\n */\r\nexport const cnMobile = /^1\\d{10}$/\r\n/**\r\n * html左右空白字符（不区分大小写）\r\n */\r\nexport const htmlLeftRightBlank = /^((\\s+)|((<br\\/?>)+)|((nbsp;)+))|((\\s+)|((<br\\/?>)+)|((nbsp;)+))$/gi\r\n/**\r\n * 中国大陆身份证（18、15位）\r\n */\r\nexport const chinaIDCard = /(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}$)/\r\n/**\r\n * 单个中文字符\r\n */\r\nexport const chineseChar = /[\\u4E00-\\u9FFF]/\r\n","/**\r\n * 将字符串中的关键字符进行编码，以避免在传给Regex时，这些字符被当成正则中的关键字处理\r\n */\r\nexport function escapeReg(str: string) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\r\n}","import { AnyKeyValueType } from \"../declaration/common\"\r\n\r\n/**\r\n* html转义实体\r\n*/\r\nexport const htmlEntityMap: AnyKeyValueType = {\r\n    \"&\": \"&amp;\",\r\n    \"<\": \"&lt;\",\r\n    \">\": \"&gt;\",\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;',\r\n    \"/\": '&#x2F;'\r\n}","/**\r\n * 消息结果实体\r\n */\r\nexport class MethodResult<TResult = any, TData = any> {\r\n    /**\r\n     * 该方法执行的逻辑是否成功（默认为true）\r\n     */\r\n    isSuccess: boolean = true\r\n    /**\r\n     * 该方法返回的消息提示\r\n     */\r\n    message: string = \"\"\r\n    /**\r\n     * 该方法返回的错误消息提示\r\n     */\r\n    errorMessage: string = \"\"\r\n    /**\r\n     * 该方法返回的结果\r\n     */\r\n    result: TResult = undefined as any\r\n    /**\r\n     * 其它数据（比如用dictionary存放不同的数据结果）\r\n     */\r\n    data: TData = undefined as any\r\n}\r\n","/**\r\n * 将值转为int型，若失败，则返回defaultValue\r\n * @param val 要转换的值\r\n * @param  defaultValue 默认值\r\n * @returns 转换结果\r\n */\r\nexport function toIntDefault(val: any, defaultValue: number | null) {\r\n    const result = parseInt(val, 10)\r\n    if (isNaN(result)) {\r\n        return defaultValue\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * 将值转为int型，若失败，则返回0\r\n * @param  val 要转换的值\r\n */\r\nexport function toInt(val: any): number {\r\n    return toIntDefault(val, 0) as number\r\n}\r\n\r\n/**\r\n * 将值转为int型，若失败，则返回null\r\n * @param  val 要转换的值\r\n * @returns 如果转换失败，则返回null\r\n */\r\nexport function toIntNull(val: any) {\r\n    return toIntDefault(val, null)\r\n}\r\n\r\n/**\r\n * 将值转为float型，若失败，则返回defaultValue\r\n * @param val 要转换的值\r\n * @param defaultValue 默认值\r\n * @returns  转换结果\r\n */\r\nexport function toFloatDefault(val: any, defaultValue: number | null) {\r\n    const result = parseFloat(val)\r\n    if (isNaN(result)) {\r\n        return defaultValue\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * 将值转为float型，若失败，则返回0\r\n * @param  val 要转换的值\r\n * @returns  转换结果\r\n */\r\nexport function toFloat(val: any): number {\r\n    return toFloatDefault(val, 0) as number\r\n}\r\n\r\n/**\r\n * 将值转为float型，若失败，则返回null\r\n * @param  val 要转换的值\r\n * @returns  转换结果\r\n */\r\nexport function toFloatNull(val: any) {\r\n    return toFloatDefault(val, null)\r\n}\r\n","import { partNumber, htmlLeftRightBlank, chineseChar } from \"../constant/regex\"\r\nimport { escapeReg } from \"./regexp\"\r\nimport { htmlEntityMap } from \"../constant/map\"\r\nimport { MethodResult } from \"../entity/method-result\"\r\nimport { toInt } from \"./convert\"\r\n\r\n/**\r\n * 将字符串按一定字符数拆分成字符串数组\r\n */\r\nexport function splitString(str: string, stepCharCount: number): string[] {\r\n    if (!str || stepCharCount <= 0) {\r\n        return []\r\n    }\r\n    const strLen = str.length\r\n    if (strLen <= stepCharCount) {\r\n        return [str]\r\n    }\r\n    const result: string[] = []\r\n    let startIndex = 0\r\n    while (startIndex < strLen) {\r\n        result.push(str.substr(startIndex, stepCharCount))\r\n        startIndex += stepCharCount\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * 截取字符串并以省略符号显示字符串\r\n * @param str 原字符串\r\n * @param len 要保留的字符长度\r\n * @param ellipsisChars 被截断的字符显示的符号\r\n */\r\nexport function ellipsis(str: string, len: number, ellipsisChars = \"...\"): string {\r\n    if (!str || len <= 0) {\r\n        return \"\"\r\n    }\r\n    if (str.length <= len) {\r\n        return str\r\n    }\r\n    return str.substring(0, len) + ellipsisChars\r\n}\r\n\r\n/**\r\n * 从字符串中提取数字（可带小数点）。如：\"abc123.01cde\"->123.01\r\n */\r\nexport function getNumber(str: string): number | null {\r\n    if (!str) {\r\n        return null\r\n    }\r\n    const mt = str.match(partNumber)\r\n    if (!mt || !mt.length) {\r\n        return null\r\n    }\r\n    return parseFloat(mt[0])\r\n}\r\n\r\n/**\r\n * 去左右空格\r\n * @param  str 待处理字符串\r\n * @returns  处理后的字符串\r\n */\r\nexport function trim(str: string) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    return str.replace(/^\\s+|\\s+$/g, \"\")\r\n}\r\n\r\n/**\r\n * 去左空格\r\n * @param  str 待处理字符串\r\n * @returns  处理后的字符串\r\n */\r\nexport function lTrim(str: string) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    return str.replace(/^\\s+/, \"\")\r\n}\r\n\r\n/**\r\n * 去右空格\r\n * @param  str 待处理字符串\r\n * @returns  处理后的值\r\n */\r\nexport function rTrim(str: string) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    return str.replace(/\\s+$/, \"\")\r\n}\r\n\r\n/**\r\n * 去掉左边的指定字符串\r\n * @param str 待处理的字符串\r\n * @param strToRemove 需要移除的字符串\r\n * @param isIgnoreCase 是否忽略大小写\r\n * @returns 处理结果\r\n */\r\nexport function lTrimString(str: string, strToRemove: string, isIgnoreCase: boolean = false) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    if (!strToRemove) {\r\n        return str\r\n    }\r\n    return str.replace(new RegExp(`^(${escapeReg(strToRemove)})*`, isIgnoreCase ? \"gi\" : \"g\"), \"\")\r\n}\r\n\r\n/**\r\n * 去掉右边的指定字符串\r\n * @param str 待处理的字符串\r\n * @param strToRemove 需要移除的字符串\r\n * @param isIgnoreCase 是否忽略大小写\r\n * @returns 处理结果\r\n */\r\nexport function rTrimString(str: string, strToRemove: string, isIgnoreCase: boolean = false) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    if (!strToRemove) {\r\n        return str\r\n    }\r\n    return str.replace(new RegExp(`(${escapeReg(strToRemove)})*$`, isIgnoreCase ? \"gi\" : \"g\"), \"\")\r\n}\r\n\r\n/**\r\n * 去左右指定的字符串\r\n * @param str 待处理的字符串\r\n * @param strToRemove 需要移除的字符串\r\n * @param isIgnoreCase 是否忽略大小写\r\n * @returns 处理结果\r\n */\r\nexport function trimString(str: string, strToRemove: string, isIgnoreCase: boolean = false) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    if (!strToRemove) {\r\n        return str\r\n    }\r\n    return str.replace(new RegExp(`(^(${escapeReg(strToRemove)})*)|((${escapeReg(strToRemove)})*$)`, isIgnoreCase ? \"gi\" : \"g\"), \"\")\r\n}\r\n\r\n/**\r\n * 从html字符串中移除左右空白占位符\r\n * @param html 待处理的字符串\r\n * @returns 处理结果\r\n */\r\nexport function trimHTML(html: string) {\r\n    let str = html\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    while (htmlLeftRightBlank.test(str)) {\r\n        str = str.replace(htmlLeftRightBlank, \"\")\r\n    }\r\n    return str\r\n}\r\n\r\n/**\r\n * 判断两个字符串是否相等（忽略大小写）\r\n */\r\nexport function equalsIgnoreCase(a: string, b: string) {\r\n    return (a || \"\").toUpperCase() == (b || \"\").toUpperCase()\r\n}\r\n\r\n/**\r\n * 判断两个字符串是否相等（忽略大小写+去左右空白）\r\n */\r\nexport function equalsIgnoreCaseAndTrim(a: string, b: string) {\r\n    return equalsIgnoreCase(trim(a), trim(b))\r\n}\r\n\r\n/**\r\n * 指定源字符串source中是否包含search字符串\r\n * @param  source 源字符串\r\n * @param  search 要查找的字符串\r\n * @param  isIgnoreCase 是否忽略大小写(默认为false)\r\n * @returns  结果\r\n */\r\nexport function contains(source: string, search: string, isIgnoreCase: boolean = false) {\r\n    let sourceStr = source\r\n    let str = search\r\n    if (!sourceStr) {\r\n        return false\r\n    }\r\n    if (str === \"\") {\r\n        return true\r\n    }\r\n    if (!str) {\r\n        return false\r\n    }\r\n    if (isIgnoreCase) {\r\n        sourceStr = sourceStr.toUpperCase()\r\n        str = str.toUpperCase()\r\n    }\r\n    return sourceStr.includes(str)\r\n}\r\n\r\n/**\r\n * 将html标签转换为实体形式\r\n * @param  html 需要被替换的html\r\n * @returns  转换后的值\r\n */\r\nexport function escapeHtml(html: string) {\r\n    if (!html) {\r\n        return \"\"\r\n    }\r\n    return String(html).replace(/[&<>\"'/]/g, (s) => htmlEntityMap[s])\r\n}\r\n\r\n/**\r\n * @param   str 要重复的字符串\r\n * @param   repeatCount 重复次数\r\n * @returns  新的字符串\r\n */\r\nexport function repeat(str: string, repeatCount: number) {\r\n    let count = repeatCount\r\n    if (!str || count <= 0) {\r\n        return \"\"\r\n    }\r\n    const s = []\r\n    while (count--) {\r\n        s.push(str)\r\n    }\r\n    return s.join(\"\")\r\n}\r\n\r\n/**\r\n * 字符串批量构建器（无需使用\"+\"进行字符串的拼接，直接使用此对象的append方法后，再toString即可得到拼好的字符串）\r\n */\r\nexport class Builder<T> {\r\n    private _arr: T[] = []\r\n    /**\r\n     * 追加项\r\n     * @param items 待追加的项\r\n     * @returns this\r\n     */\r\n    append(...items: T[]) {\r\n        this._arr.push(...items)\r\n        return this\r\n    }\r\n    /**\r\n     * 返回已合并的所有项的字符串\r\n     */\r\n    toString() {\r\n        return this._arr.join(\"\")\r\n    }\r\n    /**\r\n     * 清空当前的构建器中的所有项\r\n     * @returns this\r\n     */\r\n    clear() {\r\n        this._arr = []\r\n        return this\r\n    }\r\n    /**\r\n     * 返回构建器中所有项的字符串总的字符长度\r\n     */\r\n    length() {\r\n        return this.toString().length\r\n    }\r\n}\r\n\r\nexport const builder = Builder\r\n\r\n/**\r\n * 使用模板格式化字符串\r\n * @param str 模板，如：\"今天是星期{0}，已成交{1}单！\"\r\n * @param args 模板中的参数\r\n */\r\nexport function format(str: string, ...args: any[]) {\r\n    if (!str || !args.length) {\r\n        return str\r\n    }\r\n    let result = str\r\n    for (let token = 0; token < args.length; token++) {\r\n        result = result.replace(new RegExp(\"\\\\{\" + token + \"\\\\}\", \"gi\"), args[token])\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * 删除空白行（空白行是指：此行为空白且末尾为 \\r 或 \\n）\r\n */\r\nexport function removeBlankLines(str: string): string {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    return str.replace(/^\\s*[\\r\\n]/gm, \"\")\r\n}\r\n\r\n/**\r\n * 将文本中的字符串 \"\\r\\n\" 和 \"\\n\" 统一替换成 <br/>\r\n */\r\nexport function replaceNewlineToBr(str: string) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    return str.replace(/\\\\r\\\\n/gi, \"<br/>\").replace(/\\\\n/gi, \"<br/>\")\r\n}\r\n\r\n/**\r\n * 获取字符串中的中文字符\r\n */\r\nexport function getChineseWord(str: string) {\r\n    if (!str) {\r\n        return \"\"\r\n    }\r\n    const match = str.match(new RegExp(chineseChar, \"g\"))\r\n    if (!match || !match.length) {\r\n        return \"\"\r\n    }\r\n    return match.join(\"\")\r\n}\r\n\r\n/**\r\n * 按分隔符合并字符串\r\n */\r\nexport function combineStr(separator: string, ...subStrs: string[]) {\r\n    if (!subStrs || !subStrs.length) {\r\n        return \"\"\r\n    }\r\n    return subStrs.filter((k) => !!k).join(separator)\r\n}\r\n\r\n/**\r\n * 判断字符串是否表示一个集合中的某一项或某一个范围（注：一个范围用英文冒号分隔，多个范围用英文逗号分隔。自动兼容全半角分隔符和多余的空格），如：\r\n * 【1】表示第1项\r\n * 【2】表示第2项\r\n * 【2:5】表示第2项到第5项\r\n * 【-1】表示最后一项\r\n * 【-2】表示倒数第2项\r\n * 【-5:-2】表示倒数第5项到倒数第2项\r\n * 【2,4:7,-5:-2】表示第2项和第4到7项和倒数第5项至倒数第2项\r\n */\r\nexport function isRangeText(str: string) {\r\n    const msg = new MethodResult()\r\n    str = str?.replace(/，/g, \",\").replace(/：/g, \":\").replace(/\\s/g, \"\")\r\n    str = trimString(str, \",\")\r\n    if (!str) {\r\n        msg.isSuccess = false\r\n        msg.message = \"必须提供一个有效的范围！\"\r\n        return msg\r\n    }\r\n    const itemReg = /^-?\\d+$/\r\n    const items = str.split(\",\")\r\n    for (const item of items) {\r\n        const arr = item.split(\":\")\r\n        if (!(arr.length == 1 || arr.length == 2)) {\r\n            msg.isSuccess = false\r\n            msg.message = \"格式不正确！\"\r\n            break\r\n        }\r\n        if (!itemReg.test(arr[0]) || !toInt(arr[0])) {\r\n            msg.isSuccess = false\r\n            msg.message = \"格式不正确，必须为整数，且不能为 0！\"\r\n            break\r\n        }\r\n        if (arr.length == 2 && (!itemReg.test(arr[1]) || !toInt(arr[1]))) {\r\n            msg.isSuccess = false\r\n            msg.message = \"格式不正确，必须为整数，且不能为 0！\"\r\n            break\r\n        }\r\n        if (arr.length == 2 && toInt(arr[0]) > toInt(arr[1])) {\r\n            msg.isSuccess = false\r\n            msg.message = \"格式不正确，左侧数字必须小于等于右侧数字！\"\r\n            break\r\n        }\r\n    }\r\n    return msg\r\n}\r\n","import { trim } from \"./string\"\r\n\r\n/**\r\n * 判断obj是否为null\r\n */\r\nexport function isNull(obj: any) {\r\n    return obj === null\r\n}\r\n\r\n/**\r\n * 判断obj是否为数组\r\n */\r\nexport function isArray(obj: any) {\r\n    if (!obj) {\r\n        return false\r\n    }\r\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\r\n}\r\n\r\n/**\r\n * 判断val是否为数字\r\n * @param val 要判断的值\r\n * @returns  判断结果\r\n */\r\nexport function isNumber(val: any) {\r\n    return (typeof val === \"number\" || typeof val === \"string\") && val !== \"\" && !isNaN(val as any)\r\n}\r\n\r\n/**\r\n * 判断指定值是否为一个对象\r\n * @param  val 要判断的值\r\n * @returns  判断结果\r\n */\r\nexport function isObject(val: any) {\r\n    return !!(val && typeof val === \"object\")\r\n}\r\n\r\n/**\r\n * 判断指定值为null或undefined或\"\"\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isNullOrEmpty(val: any) {\r\n    return isUndefined(val) || isNull(val) || val === \"\"\r\n}\r\n\r\n/**\r\n * 判断指定值为null或undefined或\"\"或空白字符串\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isNullOrWhiteSpace(val: any) {\r\n    return isUndefined(val) || isNull(val) || trim(val) === \"\"\r\n}\r\n\r\n/**\r\n * 判断指定值是否为function\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isFunction(val: any) {\r\n    return !!(val && Object.prototype.toString.call(val) == \"[object Function]\")\r\n}\r\n\r\n/**\r\n * 判断指定值是否为String\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isString(val: any) {\r\n    return typeof val == \"string\" || val instanceof String\r\n}\r\n\r\n/**\r\n * 判断指定字符串是否为\"true\"或\"false\"\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isBoolean(val: string) {\r\n    return /^true|false$/i.test(val)\r\n}\r\n\r\n/**\r\n * 判断指定值是否为undefined\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isUndefined(val: any) {\r\n    return val === undefined || typeof val === \"undefined\"\r\n}\r\n\r\n/**\r\n * 指定值是否全部为大写\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isUpper(val: string) {\r\n    return !!(val && val.toUpperCase() === val)\r\n}\r\n\r\n/**\r\n * 指定值是否全部为小写\r\n * @param  val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isLower(val: string) {\r\n    return !!(val && val.toLowerCase() === val)\r\n}\r\n\r\n/**\r\n * 指定值是否为Date对象\r\n * @param val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isDate(val: any) {\r\n    return !!(val && Object.prototype.toString.call(val) === \"[object Date]\" && !isNaN(val))\r\n}\r\n\r\n/**\r\n * 指定值是否为Error对象\r\n * @param val 要判断的值\r\n * @returns 判断结果\r\n */\r\nexport function isError(val: any) {\r\n    return !!(val && val instanceof Error)\r\n}\r\n\r\n/**\r\n * 判断value值在后面的参数中是否存在\r\n * @param value 要判断的值\r\n * @param args 参数列表\r\n */\r\nexport function isIn<T>(value: T, ...args: T[]): boolean {\r\n    if (!args || !args.length) {\r\n        return false\r\n    }\r\n    return args.includes(value)\r\n}\r\n\r\n/**\r\n * 判断字符串value值在后面的参数中是否存在（忽略大小写）\r\n * @param value 要判断的值\r\n * @param args 参数列表\r\n */\r\nexport function isInIgnoreCase(value: string, ...args: string[]): boolean {\r\n    if (!args || !args.length) {\r\n        return false\r\n    }\r\n    if (!isString(value)) {\r\n        return args.includes(value)\r\n    }\r\n    return !!args.find((k) => (k || \"\").toUpperCase() === value.toUpperCase())\r\n}\r\n","import { AnyKeyValueType, AnyFunctionType } from \"../declaration/common\"\r\nimport { isFunction } from \"./data\"\r\n\r\n/**\r\n * tryRun在调用异常时执行的函数\r\n */\r\nlet defaultTryRunErrorHandler: AnyFunctionType = () => null\r\n\r\n/**\r\n * 是否为服务器环境\r\n */\r\nexport function isServer() {\r\n    return typeof window === \"undefined\"\r\n}\r\n\r\n/**\r\n * 是否为浏览器环境\r\n */\r\nexport function isBowser() {\r\n    return !isServer()\r\n}\r\n\r\n/**\r\n * 判断是否为生产环境（process.env.NODE_ENV==production）\r\n */\r\nexport function isProduction() {\r\n    if (!isServer()) {\r\n        return false\r\n    }\r\n    const g = getGlobalObject() as NodeJS.Global\r\n    if (!g.process.env) {\r\n        return false\r\n    }\r\n    return (g.process.env.NODE_ENV || \"\").toLowerCase() == \"production\"\r\n}\r\n\r\n/**\r\n * 判断是否为开发环境（process.env.NODE_ENV==development）\r\n */\r\nexport function isDevelopment() {\r\n    if (!isServer()) {\r\n        return false\r\n    }\r\n    const g = getGlobalObject() as NodeJS.Global\r\n    if (!g.process.env) {\r\n        return false\r\n    }\r\n    return (g.process.env.NODE_ENV || \"\").toLowerCase() == \"development\"\r\n}\r\n\r\n/**\r\n * 获取全局对象\r\n */\r\n// eslint-disable-next-line no-undef\r\nexport function getGlobalObject(): Window | NodeJS.Global {\r\n    if (isBowser()) {\r\n        return window\r\n    }\r\n    return global\r\n}\r\n\r\n/**\r\n * 当前环境中的全局对象\r\n */\r\nexport const globalObject = getGlobalObject()\r\n\r\n/**\r\n * 获取document对象，若没有，则为null\r\n */\r\nexport function getDocument(): Document {\r\n    return ((globalObject as any).document || null) as Document\r\n}\r\n\r\n/**\r\n * 当前环境中的document对象，若没有，则为null\r\n */\r\nexport const document = getDocument()\r\n\r\n/**\r\n * 获取localStorage对象，若没有，则为null\r\n */\r\nexport function getLocalStorage(): Storage {\r\n    return ((globalObject as any).localStorage || null) as Storage\r\n}\r\n\r\n/**\r\n * 获取Symbol类型，若没有，则为null\r\n */\r\nexport function getSymbol(desc?: string): any {\r\n    const g = globalObject as any\r\n    return g.Symbol ? g.Symbol(desc) : null\r\n}\r\n\r\n/**\r\n * 创建全局命名空间\r\n * @param name 名称，如\"A.B.C\"\r\n * @returns 全局对象，如：window.A.B.C\r\n */\r\nexport function createNamespace(name: string): any {\r\n    if (!name) {\r\n        return null as any\r\n    }\r\n    let obj: any = globalObject\r\n    const tokens = name.split(\".\")\r\n    let token = \"\"\r\n    while (tokens.length > 0) {\r\n        token = tokens.shift() as string\r\n        if (typeof obj[token] === \"undefined\") {\r\n            obj[token] = {}\r\n        }\r\n        obj = obj[token]\r\n    }\r\n    return obj\r\n}\r\n\r\n/**\r\n * 获取指定对象的指定属性\r\n * @param obj 对象\r\n * @param path 属性路径，如：a.b.c\r\n * @returns 返回obj.a.b.c，如果获取失败，则返回null\r\n */\r\nexport function getValue<T>(obj: AnyKeyValueType, path: string): T | null {\r\n    if (!obj || !path) {\r\n        return null\r\n    }\r\n    let temp = obj\r\n    try {\r\n        path.split(\".\").forEach((keyName) => {\r\n            temp = temp[keyName]\r\n        })\r\n        if (typeof temp == \"undefined\") {\r\n            return null\r\n        }\r\n        return temp as T\r\n    } catch (e) {\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * 深度clone\r\n */\r\nexport function deepClone<T>(obj: T): T | null {\r\n    try {\r\n        return JSON.parse(JSON.stringify(obj))\r\n    } catch (e) {\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * 尝试运行指定function；若异常，则执行全局配置的异常处理函数tryRunErrorHandler，并返回null\r\n * @param fn  函数名\r\n * @param args 参数\r\n */\r\nexport function tryRun<T>(fn: AnyFunctionType, ...args: any[]): T | null {\r\n    if (!fn) {\r\n        return null\r\n    }\r\n    try {\r\n        return fn(...args) as T\r\n    } catch (e) {\r\n        if (defaultTryRunErrorHandler) {\r\n            defaultTryRunErrorHandler(e)\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * 重新设置全局异常处理函数\r\n */\r\nexport function setTryRunErrorHandler(fn: AnyFunctionType) {\r\n    defaultTryRunErrorHandler = fn\r\n}\r\n\r\n/**\r\n * 合并多个对象，与 Object.assign 的行为唯一的区别是：把相同的函数合并到一起，并从第一个参数的此函数一直调用到最后一个参数的此函数\r\n * @param objs 要合并的对象\r\n * @returns 合并后的新对象\r\n */\r\nexport function mergeObjectAndCombineSameFunc<T = any>(target: T, ...sources: T[]): T {\r\n    if (!sources || !sources.length) {\r\n        return target\r\n    }\r\n    const result = sources.reduce((preItem: any, currentItem: any) => {\r\n        if (!preItem) {\r\n            return currentItem\r\n        }\r\n        if (!currentItem) {\r\n            return preItem\r\n        }\r\n        const pre = { ...preItem }\r\n        const cur = { ...currentItem }\r\n        //合并function\r\n        Object.keys(pre).forEach((key) => {\r\n            const preValue: any = pre[key]\r\n            const currentValue: any = cur[key]\r\n            const isPreValueFunction: boolean = isFunction(preValue)\r\n            const isCurrentValueFunction: boolean = isFunction(currentValue)\r\n            if (!isPreValueFunction && !isCurrentValueFunction) {\r\n                return\r\n            }\r\n            if (isPreValueFunction && !isCurrentValueFunction) {\r\n                //上一项是函数，而下一项不是函数，则以上一项为准\r\n                cur[key] = preValue\r\n            } else if (!isPreValueFunction && isCurrentValueFunction) {\r\n                //上一项不是函数，下一项是函数，不用处理\r\n            } else {\r\n                //上一项与下一项的值均为函数，则合并\r\n                cur[key] = (...args: any[]) => {\r\n                    preValue(...args)\r\n                    currentValue(...args)\r\n                }\r\n            }\r\n            //删除上一项的值，便于后面的合并覆盖\r\n            pre[key] = undefined\r\n        })\r\n        return {\r\n            ...pre,\r\n            ...cur\r\n        }\r\n    }, target || {}) as T\r\n    return result\r\n}\r\n","import { getLocalStorage } from \"../common/lib\"\r\n\r\nlet globalCacheName = \"x-js-kit-localcache\"\r\n/**\r\n * 自动清理过期缓存的间隔时间（毫秒），默认为30分钟\r\n */\r\nlet autoClearExpiredTimeSpan = 30 * 60 * 1000\r\nlet clearExpiredIntervalId: number\r\nlet isInited = false\r\n\r\nexport interface ItemContentType<ValueType = any> {\r\n    /**\r\n     * 具体的缓存值\r\n     */\r\n    value: ValueType\r\n    /**\r\n     * 过期时间，若不指定，则无过期时间（此时间为：从1970年1月1日0时0分0秒（UTC，即协调世界时）到该日期的毫秒数。如：new Date().valueOf()）\r\n     */\r\n    expire?: number\r\n}\r\nexport interface GlobalCacheType<ValueType = any> {\r\n    /**\r\n     * 时间\r\n     */\r\n    time: number\r\n    /**\r\n     * 所有缓存项\r\n     */\r\n    items: { [key: string]: ItemContentType<ValueType> }\r\n}\r\n\r\n/**\r\n * 获取localStorage对象\r\n */\r\nfunction getStore<ValueType>(): Storage {\r\n    const store = getLocalStorage()\r\n    if (!store || isInited) {\r\n        return store\r\n    }\r\n    //初始化\r\n    isInited = true\r\n    //设置默认缓存值\r\n    if (!store.getItem(globalCacheName)) {\r\n        const defaultGlobalLocalStorage: GlobalCacheType<ValueType> = {\r\n            time: new Date().valueOf(),\r\n            items: {}\r\n        }\r\n        store.setItem(globalCacheName, JSON.stringify(defaultGlobalLocalStorage))\r\n    }\r\n    //立即清理过期缓存\r\n    clearExpired()\r\n    //执行定时清理过期缓存\r\n    runClearExpiredInterval()\r\n    return store\r\n}\r\n//立即初始化\r\ngetStore()\r\n\r\n/**\r\n * 返回全局缓存对象\r\n */\r\nexport function getGlobalCache<ValueType>(): GlobalCacheType<ValueType> | null {\r\n    const cacheValue = getStore().getItem(globalCacheName) as string\r\n    if (!cacheValue) {\r\n        return null\r\n    }\r\n    return JSON.parse(cacheValue) as GlobalCacheType<ValueType>\r\n}\r\n/**\r\n * 修改localStorage缓存的默认名称\r\n */\r\nexport function setGlobalCacheName(name: string) {\r\n    const oldValue = getStore().getItem(globalCacheName) as string\r\n    getStore().removeItem(globalCacheName)\r\n    globalCacheName = name\r\n    getStore().setItem(globalCacheName, oldValue)\r\n}\r\n\r\n/**\r\n * 添加数据至缓存（默认每30分钟自动清理所有过期的缓存）\r\n */\r\nexport function add<ValueType>(key: string, value: ItemContentType<ValueType>) {\r\n    const cache = getGlobalCache()\r\n    if (!cache) {\r\n        return\r\n    }\r\n    cache.items[key] = value\r\n    getStore().setItem(globalCacheName, JSON.stringify(cache))\r\n}\r\n\r\n/**\r\n * 删除指定缓存\r\n */\r\nexport function remove(key: string) {\r\n    const cache = getGlobalCache()\r\n    if (!cache) {\r\n        return\r\n    }\r\n    delete cache.items[key]\r\n    getStore().setItem(globalCacheName, JSON.stringify(cache))\r\n}\r\n\r\n/**\r\n * 读取指定缓存\r\n * @param key 缓存key\r\n * @param ignoreExpireCheck 是否忽略过期检测，默认为false.（true:即使过期，只要还没被清理，则依然返回。false:如果已过期，则删除此缓存并返回null）\r\n */\r\nexport function get<ValueType>(key: string, ignoreExpireCheck: boolean = false): ItemContentType<ValueType> | null {\r\n    const cache = getGlobalCache()\r\n    if (!cache) {\r\n        return null\r\n    }\r\n    const item = cache.items[key] as ItemContentType<ValueType>\r\n    if (!item) {\r\n        return null\r\n    }\r\n    if (!ignoreExpireCheck && item.expire && item.expire < new Date().valueOf()) {\r\n        remove(key)\r\n        return null\r\n    }\r\n    return item\r\n}\r\n\r\n/**\r\n * 清理过期缓存\r\n */\r\nexport function clearExpired() {\r\n    const ch = getGlobalCache()\r\n    if (!ch) return\r\n    Object.keys(ch.items).forEach((key) => {\r\n        const item = ch.items[key]\r\n        if (!item || !item.expire) {\r\n            return\r\n        }\r\n        if (item.expire < new Date().valueOf()) {\r\n            remove(key)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 执行自动定期清理\r\n */\r\nfunction runClearExpiredInterval() {\r\n    if (clearExpiredIntervalId) {\r\n        clearInterval(clearExpiredIntervalId)\r\n    }\r\n    clearExpiredIntervalId = setInterval(clearExpired, autoClearExpiredTimeSpan) as any\r\n}\r\n\r\n/**\r\n * 获取自动清理过期缓存的间隔（毫秒）\r\n */\r\nexport function getAutoClearExpiredTimeSpan() {\r\n    return autoClearExpiredTimeSpan\r\n}\r\n\r\n/**\r\n * 设置自动清理过期缓存的间隔（毫秒），并按计划执行清理\r\n */\r\nexport function setAutoClearExpiredTimeSpan(timeSpan: number) {\r\n    if (timeSpan <= 0) {\r\n        throw new Error(\"timeSpan must > 0.\")\r\n    }\r\n    autoClearExpiredTimeSpan = timeSpan\r\n    runClearExpiredInterval()\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as localStorage from \"./localStorage\"\r\n\r\nexport default {\r\n    /**\r\n     * 带过期时间的缓存（就是浏览器中的localStorage，只是在value的结构中设置了指定的节点来表明什么时候过期，如果过期，则不返回该数据）\r\n     */\r\n    localStorage\r\n}\r\n","import { globalObject, document } from \"../common/lib\"\r\n\r\n/**\r\n * 浏览器宽度类别枚举\r\n */\r\nexport enum BrowserWidthTypeEnum {\r\n    /**\r\n     * 非常小（<576px）\r\n     */\r\n    \"ExtraSmall\" = \"ExtraSmall\",\r\n    /**\r\n     * 小（≥576px 且 <768px）\r\n     */\r\n    \"Small\" = \"Small\",\r\n    /**\r\n     * 中（≥768px 且 <992px）\r\n     */\r\n    \"Medium\" = \"Medium\",\r\n    /**\r\n     * 大（≥992px 且 <1200px）\r\n     */\r\n    \"Large\" = \"Large\",\r\n    /**\r\n     * 非常大（≥1200px）\r\n     */\r\n    \"ExtraLarge\" = \"ExtraLarge\"\r\n}\r\n\r\n/**\r\n * 获取当前浏览器窗口的大小，如：{\"width\": 1024,\"height\": 768}\r\n */\r\nexport function size(): { width: number, height: number } {\r\n    return {\r\n        width: (<Window>globalObject).innerWidth || document.documentElement.clientWidth || document.body.clientWidth,\r\n        height: (<Window>globalObject).innerHeight || document.documentElement.clientHeight || document.body.clientHeight\r\n    }\r\n}\r\n\r\n/**\r\n * 返回当前浏览器窗口的宽度类型\r\n */\r\nexport function getWidthType(): BrowserWidthTypeEnum {\r\n    const { width } = size()\r\n    if (width < 576) {\r\n        return BrowserWidthTypeEnum.ExtraSmall\r\n    }\r\n    if (width >= 576 && width < 768) {\r\n        return BrowserWidthTypeEnum.Small\r\n    }\r\n    if (width >= 768 && width < 992) {\r\n        return BrowserWidthTypeEnum.Medium\r\n    }\r\n    if (width >= 992 && width < 1200) {\r\n        return BrowserWidthTypeEnum.Large\r\n    }\r\n    return BrowserWidthTypeEnum.ExtraLarge\r\n}","import * as regexConst from \"../constant/regex\"\r\n\r\n/**\r\n * 判断是否为email\r\n */\r\nexport function isEmail(val: string) {\r\n    return regexConst.email.test(val)\r\n}\r\n/**\r\n * 判断是否全为英文字符（a-zA-Z）\r\n */\r\nexport function isAllEnglish(val: string) {\r\n    return regexConst.allEnglish.test(val)\r\n}\r\n/**\r\n * 判断是否全为数字字符（0-9）\r\n */\r\nexport function isAllNumber(val: string) {\r\n    return regexConst.allNumber.test(val)\r\n}\r\n/**\r\n * 判断是否为中国大陆手机号（只考虑以1开头的11位数字即可）\r\n */\r\nexport function isCNMobile(val: string) {\r\n    return regexConst.cnMobile.test(val)\r\n}\r\n/**\r\n * 判断是否为中国大陆身份证号码\r\n */\r\nexport function isChinaIDCard(val: string) {\r\n    return regexConst.chinaIDCard.test(val)\r\n}\r\n/**\r\n * 判断键盘按键的keyCode是否为字母和数字\r\n */\r\nexport function isAlphaNumericKeyCode(keyCode: number) {\r\n    return (keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 105)\r\n}\r\n/**\r\n * 判断字符串中是否包含中文字符\r\n */\r\nexport function hasChineseWord(str: string) {\r\n    return regexConst.chineseChar.test(str)\r\n}\r\n","import * as regexConst from \"../constant/regex\"\r\n\r\n/**\r\n * url是否以【http://】开头\r\n */\r\nexport function isHttp(url: string) {\r\n    if (!url) {\r\n        return false\r\n    }\r\n    return regexConst.http.test(url.toLowerCase())\r\n}\r\n\r\n/**\r\n * url是否以【https://】开头\r\n */\r\nexport function isHttps(url: string) {\r\n    if (!url) {\r\n        return false\r\n    }\r\n    return regexConst.https.test(url.toLowerCase())\r\n}\r\n\r\n/**\r\n * url是否为http或https的地址\r\n */\r\nexport function isHttpOrHttpsUrl(url: string) {\r\n    if (!url) {\r\n        return false\r\n    }\r\n    return regexConst.httpOrHttps.test(url.toLowerCase())\r\n}","import { isBowser, getGlobalObject, globalObject } from \"../common/lib\"\r\nimport { getWidthType, BrowserWidthTypeEnum } from \"../device/browser\"\r\n\r\n/**\r\n * 判断是否为IE浏览器（仅支持<=IE 11）\r\n * @param version 具体的IE版本号\r\n * @param userAgent 浏览器代理字符串，若不指定，则取navigator.userAgent\r\n */\r\nexport function isIE(version?: number, userAgent?: string): boolean {\r\n    let ua = userAgent || \"\"\r\n    if (isBowser() && !ua) {\r\n        ua = (<Window>getGlobalObject()).navigator.userAgent\r\n    }\r\n    if (!ua) {\r\n        throw new Error(\"You must set userAgent in this method.\")\r\n    }\r\n    if (!version) {\r\n        return /msie/i.test(ua) || !!ua.match(/Trident\\/7\\./i)\r\n    }\r\n    if (version == 11) {\r\n        return !!ua.match(/Trident\\/7\\./i)\r\n    }\r\n    return (ua.match(new RegExp(\"MSIE\\\\s+(\\\\d+)\", \"i\")) || [])[1] == version.toString()\r\n}\r\n\r\n/**\r\n * 是否非常小的宽度\r\n */\r\nexport function isExtraSmall() {\r\n    return getWidthType() == BrowserWidthTypeEnum.ExtraSmall\r\n}\r\n\r\n/**\r\n * 是否小的宽度\r\n */\r\nexport function isSmall() {\r\n    return getWidthType() == BrowserWidthTypeEnum.Small\r\n}\r\n\r\n/**\r\n * 是否中等宽度\r\n */\r\nexport function isMedium() {\r\n    return getWidthType() == BrowserWidthTypeEnum.Medium\r\n}\r\n\r\n/**\r\n * 是否大的宽度\r\n */\r\nexport function isLarge() {\r\n    return getWidthType() == BrowserWidthTypeEnum.Large\r\n}\r\n\r\n/**\r\n * 是否非常大的宽度\r\n */\r\nexport function isExtraLarge() {\r\n    return getWidthType() == BrowserWidthTypeEnum.ExtraLarge\r\n}\r\n\r\n/**\r\n * 当前网页是否通过F5刷新、重新加载按钮或location.reload()方法加载进来的\r\n * 判断方法：performance.navigation.type == 1\r\n */\r\nexport function isReload() {\r\n    const g = <Window>globalObject\r\n    return g.performance && g.performance.navigation && g.performance.navigation.type == 1\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as common from \"./common\"\r\nimport * as url from \"./url\"\r\nimport * as browser from \"./browser\"\r\n\r\nexport default {\r\n    /**\r\n     * 公共的数据校验\r\n     */\r\n    common,\r\n    /**\r\n     * url相关的校验\r\n     */\r\n    url,\r\n    /**\r\n     * 浏览器相关校验\r\n     */\r\n    browser\r\n}\r\n","/**\r\n * 将一个数组拆分为多个数组\r\n * @param arr 原数组\r\n * @param stepCount 拆分后，每个数组最多包含的项数量\r\n */\r\nexport function splitArray<T>(arr: T[], stepCount: number): T[][] {\r\n    if (!arr || !arr.length || stepCount <= 0) {\r\n        return []\r\n    }\r\n    const arrLen = arr.length\r\n    if (arrLen <= stepCount) {\r\n        return [arr]\r\n    }\r\n    const newArray: T[][] = []\r\n    const maxCount = Math.ceil(arrLen / stepCount)\r\n    let startIndex = 0\r\n    for (let i = 0; i < maxCount; i++) {\r\n        newArray[i] = arr.slice(startIndex, (i + 1) * stepCount)\r\n        startIndex += stepCount\r\n    }\r\n    return newArray\r\n}\r\n\r\n/**\r\n * 去掉array中的重复项\r\n * @param arr 需要去重的数组\r\n */\r\nexport function unique<T>(arr: T[]): T[] {\r\n    if (!arr) {\r\n        return []\r\n    }\r\n    return Array.from(new Set(arr))\r\n}\r\n\r\n/**\r\n * 合并两个数组（未去重）\r\n * @param arr1 数组1\r\n * @param arr2 数组2\r\n */\r\nexport function union<T>(arr1: T[], arr2: T[]): T[] {\r\n    const a1 = arr1 || []\r\n    const a2 = arr2 || []\r\n    return [...a1, ...a2]\r\n}\r\n\r\n/**\r\n * 获取两个数组的交集（已去重）\r\n * @param arr1 数组1\r\n * @param arr2 数组2\r\n */\r\nexport function intersect<T>(arr1: T[], arr2: T[]): T[] {\r\n    const a1 = arr1 || []\r\n    const a2 = arr2 || []\r\n    return unique(a1.filter((x) => a2.includes(x)))\r\n}\r\n\r\n/**\r\n * 获取两个数组的差集（已去重）\r\n * @param arr1 数组1\r\n * @param arr2 数组2\r\n */\r\nexport function diff<T>(arr1: T[], arr2: T[]): T[] {\r\n    const a1 = arr1 || []\r\n    const a2 = arr2 || []\r\n    const diff1 = a1.filter((x) => !a2.includes(x))\r\n    const diff2 = a2.filter((x) => !a1.includes(x))\r\n    return unique([...diff1, ...diff2])\r\n}\r\n\r\n/**\r\n * 遍历指定数组并返回一个新数组（与原生map不一样的地方是：原生map中未过滤null和undefined，而此方法会过滤）\r\n * @param arr 需要遍历的数组\r\n * @param fn 处理函数\r\n */\r\nexport function map<TargetType = any, SourceType = any>(arr: SourceType[], fn: (item: SourceType, idx?: number) => TargetType | null | undefined): TargetType[] {\r\n    if (!arr || !fn) {\r\n        return []\r\n    }\r\n    const result: TargetType[] = []\r\n    let temp: TargetType | null | undefined\r\n    for (let i = 0; i < arr.length; i++) {\r\n        temp = fn(arr[i], i)\r\n        if (temp == null || typeof temp == \"undefined\") {\r\n            continue\r\n        }\r\n        result.push(temp)\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * 根据起始值和终点值创建一个数组，如：[1,2,3,4....]\r\n * @param startValue 起始值（包含）\r\n * @param endValue 终点值（包含）\r\n * @param step 步长，默认为 1\r\n */\r\nexport function createNumberArray(startValue: number, endValue: number, step?: number) {\r\n    let stepValue = 1\r\n    if (step) {\r\n        stepValue = step\r\n    }\r\n    const arr = [] as number[]\r\n    for (let i = startValue; i <= endValue; i += stepValue) {\r\n        arr.push(i)\r\n    }\r\n    return arr\r\n}\r\n\r\n/**\r\n * 判断数组是否为空\r\n */\r\nexport function isNullOrEmpty(arr: any[]) {\r\n    return !arr || arr.length == 0\r\n}\r\n\r\n/**\r\n * 判断数组不为空\r\n */\r\nexport function isNotNullOrEmpty(arr: any[]) {\r\n    return !isNullOrEmpty(arr)\r\n}\r\n\r\n/**\r\n * 判断参数数组中是否至少有一个数组为空\r\n */\r\nexport function isAnyNullOrEmpty(...arrs: any[][]) {\r\n    if (!arrs || arrs.length == 0) {\r\n        return true\r\n    }\r\n    return arrs.some((k) => isNullOrEmpty(k))\r\n}\r\n\r\n/**\r\n * 判断参数数组中是否至少有一个数组不为空\r\n */\r\nexport function isAnyNotNullOrEmpty(...arrs: any[][]) {\r\n    if (!arrs || arrs.length == 0) {\r\n        return false\r\n    }\r\n    return arrs.some((k) => isNotNullOrEmpty(k))\r\n}\r\n\r\n/**\r\n * 判断参数数组中是否所有的数组都为空\r\n */\r\nexport function isAllNullOrEmpty(...arrs: any[][]) {\r\n    if (!arrs || arrs.length == 0) {\r\n        return true\r\n    }\r\n    return arrs.every((k) => isNullOrEmpty(k))\r\n}\r\n\r\n/**\r\n * 判断参数数组中是否所有的数组都不为空\r\n */\r\nexport function isAllNotNullOrEmpty(...arrs: any[][]) {\r\n    if (!arrs || arrs.length == 0) {\r\n        return false\r\n    }\r\n    return arrs.every((k) => isNotNullOrEmpty(k))\r\n}\r\n","import { document } from \"./lib\"\r\n\r\n//reference：https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie\r\n\r\n/**\r\n * 获取cookie内容\r\n * @param sKey cookie键名\r\n * @returns 内容\r\n */\r\nexport function getItem(sKey: string): string | null {\r\n    if (!document) {\r\n        return null\r\n    }\r\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(sKey).replace(/[-.+*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\r\n}\r\n\r\n/**\r\n * 设置cookie内容\r\n * @param sKey 键名\r\n * @param sValue 值\r\n * @param vEnd 到期时间（可为Number/String/Date对象，若为Number，则设置的是max-age；若为String或Date，则设置的是整个expires）\r\n * @param sPath 路径（默认/）\r\n * @param sDomain 域名（默认\"\"）\r\n * @param bSecure 是否只会被https传输（默认false）\r\n * @returns 是否设置成功\r\n */\r\nexport function setItem(sKey: string, sValue: string, vEnd: number | string | Date, sPath: string = \"/\", sDomain: string = \"\", bSecure: boolean = false): boolean {\r\n    if (!document) {\r\n        return false\r\n    }\r\n    if (!sKey || /^(?:expires|max-age|path|domain|secure)$/i.test(sKey)) {\r\n        return false\r\n    }\r\n    let sExpires = \"\"\r\n    if (vEnd) {\r\n        switch (vEnd.constructor) {\r\n            case Number:\r\n                sExpires = vEnd === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + vEnd\r\n                break\r\n            case String:\r\n                sExpires = \"; expires=\" + vEnd\r\n                break\r\n            case Date:\r\n                sExpires = \"; expires=\" + (vEnd as Date).toUTCString()\r\n                break\r\n        }\r\n    }\r\n    document.cookie = encodeURIComponent(sKey) + \"=\" + encodeURIComponent(sValue) + sExpires + (sDomain ? \"; domain=\" + sDomain : \"\") + (sPath ? \"; path=\" + sPath : \"\") + (bSecure ? \"; secure\" : \"\")\r\n    return true\r\n}\r\n\r\n/**\r\n * 是否包含某个cookie\r\n * @param sKey 键名\r\n * @returns 是否包含\r\n */\r\nexport function hasItem(sKey: string): boolean {\r\n    if (!document) {\r\n        return false\r\n    }\r\n    return (new RegExp(\"(?:^|;\\\\s*)\" + encodeURIComponent(sKey).replace(/[-.+*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie)\r\n}\r\n\r\n/**\r\n * 删除cookie\r\n * @param sKey 键名\r\n * @param sPath 路径（默认/）\r\n * @param sDomain 域名（默认\"\"）\r\n * @returns 是否删除成功\r\n */\r\nexport function removeItem(sKey: string, sPath: string = \"/\", sDomain: string = \"\"): boolean {\r\n    if (!document) {\r\n        return false\r\n    }\r\n    if (!sKey || !hasItem(sKey)) {\r\n        return false\r\n    }\r\n    document.cookie = encodeURIComponent(sKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" + (sDomain ? \"; domain=\" + sDomain : \"\") + (sPath ? \"; path=\" + sPath : \"\")\r\n    return true\r\n}\r\n\r\n\r\n\r\n/**\r\n * 获取当前cookie的全部键名\r\n * @returns 所有键名\r\n */\r\nexport function keys(): string[] {\r\n    if (!document) {\r\n        return []\r\n    }\r\n    const aKeys = document.cookie.replace(/((?:^|\\s*;)[^=]+)(?=;|$)|^\\s*|\\s*(?:=[^;]*)?(?:\\1|$)/g, \"\").split(/\\s*(?:=[^;]*)?;\\s*/)\r\n    for (let nIdx = 0; nIdx < aKeys.length; nIdx++) {\r\n        aKeys[nIdx] = decodeURIComponent(aKeys[nIdx])\r\n    }\r\n    return aKeys\r\n}","import { AnyKeyValueType } from \"../declaration/common\"\r\nimport { isArray } from \"./data\"\r\n\r\n/**\r\n   * 是否包含名key\r\n   * @param json json对象\r\n   * @param keyName key名\r\n   * @returns 判断结果\r\n   */\r\nexport function hasKey(json: AnyKeyValueType, keyName: string) {\r\n    if (!json) {\r\n        return false\r\n    }\r\n    return Object.keys(json).includes(keyName)\r\n}\r\n\r\n/**\r\n * 是否包含值value\r\n * @param  json json对象\r\n * @param keyValue value值\r\n * @returns 判断结果\r\n */\r\nexport function hasValue(json: AnyKeyValueType, keyValue: any) {\r\n    if (!json) {\r\n        return false\r\n    }\r\n    let r = false\r\n    for (const k in json) {\r\n        if (json[k] === keyValue) {\r\n            r = true\r\n            break\r\n        }\r\n    }\r\n    return r\r\n}\r\n\r\n/**\r\n * json对象转成param形式的字符串，如{a:1,b:2,c:[3,4,5]}=>\"a=1&b=2&c=3&c=4&c=5\"\r\n * @param  json 待转换的json数据源\r\n * @returns 转换结果\r\n */\r\nexport function toParams(json: AnyKeyValueType) {\r\n    if (!json) return \"\";\r\n    const arr = []\r\n    let temp = \"\";\r\n    for (const m in json) {\r\n        if (isArray(json[m])) {\r\n            temp = json[m].join(\"&\" + m + \"=\");\r\n        } else {\r\n            temp = json[m];\r\n        }\r\n        arr.push(m + \"=\" + temp);\r\n    }\r\n    return arr.join(\"&\");\r\n}\r\n\r\n/**\r\n * 将json字符串转换为对象，如果转换失败，则返回null\r\n * @param json json字符串\r\n */\r\nexport function toObject<T>(json: string): T | null {\r\n    if (!json) {\r\n        return null\r\n    }\r\n    let result: T | null = null\r\n    try {\r\n        result = JSON.parse(json)\r\n    } catch {\r\n        //\r\n    }\r\n    return result\r\n}","import { KeyValue } from \"../entity/keyValue\";\r\n\r\n/**\r\n * 将枚举转换为KeyValue列表\r\n */\r\nexport function convertEnumToList<T>(em: T): KeyValue[] {\r\n  const lst = [] as KeyValue[];\r\n  for (const key in em) {\r\n    if (!isNaN(Number(key))) {\r\n      continue;\r\n    }\r\n    const item = {} as KeyValue;\r\n    item.key = key;\r\n    item.value = em[key];\r\n    lst.push(item);\r\n  }\r\n  return lst;\r\n}\r\n","/**\r\n * 中国大陆身份证号码实体\r\n */\r\nexport class CNIDCardEntity {\r\n    /**\r\n     * 出生年月日\r\n     */\r\n    birthday: string = \"\"\r\n    /**\r\n     * 身份证长度\r\n     */\r\n    len: (15 | 18) = 18\r\n}","import { isChinaIDCard } from \"../check/common\"\r\nimport { CNIDCardEntity } from \"../entity/idCard\"\r\n\r\n/**\r\n * 将字符串转为中国大陆身份证实体\r\n */\r\nexport function toCNIDCardEntity(str: string): CNIDCardEntity | null {\r\n    let result: CNIDCardEntity = null as any\r\n    if (!isChinaIDCard(str)) {\r\n        return result\r\n    }\r\n    result = new CNIDCardEntity()\r\n    result.len = str.length as any\r\n    if (result.len == 15) {\r\n        result.birthday = \"19\" + str.substr(6, 6)\r\n    } else {\r\n        result.birthday = str.substr(6, 8)\r\n    }\r\n    result.birthday = result.birthday.substr(0, 4) + \"-\" + result.birthday.substr(4, 2) + \"-\" + result.birthday.substr(6, 2)\r\n    return result\r\n}","const ImageSrcReg = /(<img\\s+[^>]*)(src)(=[^>]*>)/gi\r\n\r\n/**\r\n * 替换html中所有img标签的src标签名称\r\n * 如：<img src=\"http://www.a.com/a.jpg\"/> ==> <img data-src=\"http://www.a.com/a.jpg\"/>\r\n * @param html html字符串\r\n * @param newAttrName 新的替代src的属性名，默认为data-src\r\n * @returns 新的html字符串\r\n */\r\nexport function replaceImgSrc(html: string, newAttrName: string = \"data-src\"): string {\r\n    if (!html) {\r\n        return \"\"\r\n    }\r\n    return html.replace(ImageSrcReg, `$1${newAttrName}$3`)\r\n}","/* eslint-disable no-bitwise */\r\nlet _id = 0\r\n\r\n/**\r\n * 生成字符长度为22的随机字符串（如：i8ejoqjq3khibr89soi31t）\r\n */\r\nexport function create() {\r\n    const str = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n    if (str.length < 22) {\r\n        return str.padEnd(22, \"0\")\r\n    }\r\n    return str.substr(0, 22)\r\n}\r\n\r\n/**\r\n * 生成UUID（如：24ff0a46-81c1-431b-a3de-68440bbc3045）\r\n */\r\nexport function uuid() {\r\n    //https://github.com/simongong/js-stackoverflow-highest-votes/blob/master/questions1-10/how-to-create-a-UUID-in-javascript.md\r\n    let d = new Date().getTime()\r\n    const str = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n        const r = (d + Math.random() * 16) % 16 | 0\r\n        d = Math.floor(d / 16)\r\n        return (c == \"x\" ? r : (r & 0x7) | 0x8).toString(16)\r\n    })\r\n    return str\r\n}\r\n\r\n/**\r\n * 在min（含）与max（含）之间生成一个随机整数\r\n * @param min 最小值\r\n * @param max 最大值\r\n */\r\nexport function range(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n\r\n/**\r\n * 返回一个自增加1的数字（第一次调用时返回1，往后每调用一次加1）\r\n */\r\nexport function id() {\r\n    return ++_id\r\n}\r\n","/**\r\n * 键值对实体\r\n */\r\nexport class KeyValue<ValueType = any, ExtendType = any> {\r\n    constructor(key: string, value: ValueType, extend?: ExtendType) {\r\n        this.key = key\r\n        this.value = value\r\n        this.extend = extend\r\n    }\r\n    /**\r\n     * 键名\r\n     */\r\n    key: string = \"\"\r\n    /**\r\n     * value值\r\n     */\r\n    value: ValueType\r\n    /**\r\n     * 扩展属性\r\n     */\r\n    extend?: ExtendType\r\n}\r\n\r\n/**\r\n * 键名值对实体\r\n */\r\nexport class KeyNameValue<ValueType = any, ExtendType = any> {\r\n    constructor(key: string, name: string, value: ValueType, extend?: ExtendType) {\r\n        this.key = key\r\n        this.name = name\r\n        this.value = value\r\n        this.extend = extend\r\n    }\r\n    /**\r\n     * 键名\r\n     */\r\n    key: string = \"\"\r\n    /**\r\n     * name名\r\n     */\r\n    name: string = \"\"\r\n    /**\r\n     * value值\r\n     */\r\n    value: ValueType\r\n    /**\r\n     * 扩展属性\r\n     */\r\n    extend?: ExtendType\r\n}","import { KeyValue } from \"../entity/keyValue\"\r\nimport { lTrimString } from \"./string\"\r\n\r\n/**\r\n * url分隔的类型\r\n */\r\nexport interface UrlSplitByQueryType {\r\n    /**\r\n     * 域名主机等主体部分\r\n     */\r\n    hostPart: string\r\n    /**\r\n     * 查询字符串部分\r\n     */\r\n    queryPart: string\r\n    /**\r\n     * 结尾的hash部分\r\n     */\r\n    hashPart: string\r\n}\r\n\r\n/**\r\n * 将url字符串以查询串分隔后，提取成三个部分（也就是以字符?和字符#中间的字符串为界限分隔）\r\n * 注意：边界不包含字符?或#\r\n * @param url url字符串\r\n */\r\nexport function splitUrlByQueryInfo(url: string): UrlSplitByQueryType {\r\n    const result = {} as UrlSplitByQueryType\r\n    result.hostPart = \"\"\r\n    result.queryPart = \"\"\r\n    result.hashPart = \"\"\r\n    if (!url) {\r\n        return result\r\n    }\r\n    const questionMarkIndex = url.lastIndexOf(\"?\")\r\n    const wellNumberMarkIndex = url.indexOf(\"#\")\r\n\r\n    //只存在查询串\r\n    if (questionMarkIndex >= 0 && wellNumberMarkIndex < 0) {\r\n        result.hostPart = url.substr(0, questionMarkIndex)\r\n        result.queryPart = lTrimString(url.substring(questionMarkIndex + 1), \"?\")\r\n        return result\r\n    }\r\n\r\n    //只存在hash\r\n    if (questionMarkIndex < 0 && wellNumberMarkIndex >= 0) {\r\n        result.hostPart = url.substr(0, wellNumberMarkIndex)\r\n        result.hashPart = lTrimString(url.substr(wellNumberMarkIndex + 1), \"#\")\r\n        return result\r\n    }\r\n\r\n    //同时存在查询串和hash\r\n    if (questionMarkIndex >= 0 && wellNumberMarkIndex >= 0) {\r\n        result.hostPart = url.substr(0, questionMarkIndex)\r\n        result.queryPart = lTrimString(url.substring(questionMarkIndex + 1, wellNumberMarkIndex), \"?\")\r\n        result.hashPart = lTrimString(url.substr(wellNumberMarkIndex + 1), \"#\")\r\n        return result\r\n    }\r\n\r\n    result.hostPart = url\r\n    return result\r\n}\r\n\r\n/**\r\n * 将url拆分对象合并成完整的url\r\n */\r\nexport function mergeUrlBySplitQueryInfo(splitInfo: UrlSplitByQueryType) {\r\n    if (!splitInfo) {\r\n        return \"\"\r\n    }\r\n    let url = splitInfo.hostPart || \"\"\r\n    if (splitInfo.queryPart) {\r\n        url += \"?\" + splitInfo.queryPart\r\n    }\r\n    if (splitInfo.hashPart) {\r\n        url += \"#\" + splitInfo.hashPart\r\n    }\r\n    return url\r\n}\r\n\r\n/**\r\n * 将查询串转换为key value数组（注意：若key重复，只处理第一个）\r\n * @param queryString 查询字符串，如：a=b&c=d\r\n */\r\nexport function convertQueryStringToKeyValueArray(queryString: string): KeyValue<string>[] {\r\n    const result = [] as KeyValue<string>[]\r\n    if (!queryString) {\r\n        return result\r\n    }\r\n    const keys = new Set()\r\n    queryString.split(\"&\").forEach((item) => {\r\n        if (!item) {\r\n            return\r\n        }\r\n        const [key, value] = item.split(\"=\")\r\n        if (!key) {\r\n            return\r\n        }\r\n        if (keys.has(key)) {\r\n            return\r\n        }\r\n        keys.add(key)\r\n        result.push(new KeyValue<string>(key, value))\r\n    })\r\n    return result\r\n}\r\n\r\n/**\r\n * 将查询串的key value数组转换成普通的字符串，如：a=b&c=d（注意：若key重复，只处理第一个）\r\n * @param arr key value数组\r\n */\r\nexport function convertKeyValueArrayToQueryString(arr: KeyValue<string>[]) {\r\n    if (!arr || !arr.length) {\r\n        return \"\"\r\n    }\r\n    const keys = new Set()\r\n    const queryString = [] as string[]\r\n    arr.forEach((item) => {\r\n        if (keys.has(item.key)) {\r\n            return\r\n        }\r\n        keys.add(item.key)\r\n        queryString.push(`${item.key}=${item.value}`)\r\n    })\r\n    return queryString.join(\"&\")\r\n}\r\n\r\n/**\r\n * 在url后面追加查询字符串，若其中key已存在，则覆盖\r\n * @param url url地址，如location.href\r\n * @param queryString 要追加的查询串，如：\"a=123&b=456\"\r\n */\r\nexport function appendQueryString(url: string, queryString: string) {\r\n    if (!url) {\r\n        return \"\"\r\n    }\r\n    if (!queryString) {\r\n        return url\r\n    }\r\n    const splitInfo = splitUrlByQueryInfo(url)\r\n    const urlQueryKeyValue = convertQueryStringToKeyValueArray(splitInfo.queryPart)\r\n    const appendQueryKeyValue = convertQueryStringToKeyValueArray(queryString)\r\n    appendQueryKeyValue.forEach((item) => {\r\n        //已存在，则修改\r\n        const queryInfo = urlQueryKeyValue.find((k) => k.key == item.key)\r\n        if (queryInfo) {\r\n            queryInfo.value = item.value\r\n            return\r\n        }\r\n        if (!item.value) {\r\n            return\r\n        }\r\n        //不存在，则追加\r\n        urlQueryKeyValue.push(new KeyValue<string>(item.key, item.value))\r\n    })\r\n    splitInfo.queryPart = convertKeyValueArrayToQueryString(urlQueryKeyValue)\r\n    return mergeUrlBySplitQueryInfo(splitInfo)\r\n}\r\n\r\n/**\r\n * 从查询串中获取指定参数\r\n * @param search 查询串，如：location.search\r\n * @param paramName 参数名\r\n */\r\nexport function getUrlParameter(search: string, paramName: string) {\r\n    const name = paramName.replace(/[[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\")\r\n    const regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\")\r\n    const results = regex.exec(search)\r\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"))\r\n}\r\n","export interface AppendElementToLimitContainerResultType {\r\n    /**\r\n     * 子元素是否超出最大范围\r\n     */\r\n    isOverflow: boolean\r\n}\r\n\r\n/**\r\n * 在指定容器的开头或末尾追加一个子元素，并且限制此容器内的子元素的最大数量。如果超出最大数量，则显示一个占位元素\r\n * 应用场景：一个 div 需要实时显示无数条日志，每条日志占用一行，当日志过多时，限制显示的数量，并展示一个【更多】按钮供用户单击查看完整日志\r\n * @param containerElement 外层容器\r\n * @param subElement 子元素\r\n * @param maxCount 最大子元素数量\r\n * @param ellipsisElement 当子元素超过最大数量时，显示一个省略占位元素，如：<p>...</p>\r\n * @param isInsertToStart 是否将子元素追加到容器的开头\r\n */\r\nexport function appendElementToLimitContainer(\r\n    containerElement: HTMLElement,\r\n    subElement: HTMLElement,\r\n    maxCount: number,\r\n    ellipsisElement: HTMLElement,\r\n    isInsertToStart?: boolean\r\n): AppendElementToLimitContainerResultType {\r\n    const result = {} as AppendElementToLimitContainerResultType\r\n    result.isOverflow = false\r\n    if (!containerElement || !subElement) {\r\n        return result\r\n    }\r\n    const conEle = containerElement as HTMLElement & {\r\n        /**\r\n         * 范围边界元素\r\n         */\r\n        // eslint-disable-next-line camelcase\r\n        _x_js_kit_limit_edge_index: number\r\n        /**\r\n         * 是否已插入省略占位元素\r\n         */\r\n        // eslint-disable-next-line camelcase\r\n        _x_js_kit_limit_inserted_ellipsis: boolean\r\n    }\r\n    if (isInsertToStart && conEle.firstChild) {\r\n        conEle.insertBefore(subElement, conEle.firstChild)\r\n    } else {\r\n        conEle.appendChild(subElement)\r\n    }\r\n    //超出范围\r\n    if (conEle._x_js_kit_limit_edge_index > 0) {\r\n        if (!conEle._x_js_kit_limit_inserted_ellipsis) {\r\n            conEle.insertBefore(ellipsisElement, conEle.childNodes[isInsertToStart ? conEle._x_js_kit_limit_edge_index + 1 : conEle._x_js_kit_limit_edge_index])\r\n            conEle._x_js_kit_limit_inserted_ellipsis = true\r\n        }\r\n        conEle.removeChild(conEle.childNodes[isInsertToStart ? conEle._x_js_kit_limit_edge_index : conEle._x_js_kit_limit_edge_index + 1])\r\n        result.isOverflow = true\r\n        return result\r\n    }\r\n    //正常范围\r\n    const childLength = containerElement.childNodes.length\r\n    if (childLength == maxCount) {\r\n        conEle._x_js_kit_limit_edge_index = Math.ceil(childLength / 2)\r\n    }\r\n    return result\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as string from \"./string\"\r\nimport * as array from \"./array\"\r\nimport * as convert from \"./convert\"\r\nimport * as cookie from \"./cookie\"\r\nimport * as json from \"./json\"\r\nimport * as data from \"./data\"\r\nimport * as enumTool from \"./enumTool\"\r\nimport * as idCard from \"./idCard\"\r\nimport * as image from \"./image\"\r\nimport * as lib from \"./lib\"\r\nimport * as random from \"./random\"\r\nimport * as url from \"./url\"\r\nimport * as regexp from \"./regexp\"\r\nimport * as dom from \"./dom\"\r\n\r\nexport default {\r\n    /**\r\n     * 字符串操作\r\n     */\r\n    string,\r\n    /**\r\n     * 数组操作\r\n     */\r\n    array,\r\n    /**\r\n     * 数据类型转换操作\r\n     */\r\n    convert,\r\n    /**\r\n     * cookie操作相关\r\n     */\r\n    cookie,\r\n    /**\r\n     * json操作\r\n     */\r\n    json,\r\n    /**\r\n     * 数据类型判断\r\n     */\r\n    data,\r\n    /**\r\n     * 枚举工具类\r\n     */\r\n    enumTool,\r\n    /**\r\n     * 证件相关\r\n     */\r\n    idCard,\r\n    /**\r\n     * 图片操作相关\r\n     */\r\n    image,\r\n    /**\r\n     * 其它常用方法\r\n     */\r\n    lib,\r\n    /**\r\n     * 随机字符串相关\r\n     */\r\n    random,\r\n    /**\r\n     * url操作\r\n     */\r\n    url,\r\n    /**\r\n     * 正则操作\r\n     */\r\n    regexp,\r\n    /**\r\n     * dom 操作\r\n     */\r\n    dom\r\n}\r\n","/* eslint-disable class-methods-use-this */\r\nimport { AnyKeyValueType } from \"../declaration/common\"\r\n\r\n/**\r\n * 日志级别类型\r\n */\r\nexport enum LevelTypeEnum {\r\n    \"info\" = \"info\",\r\n    \"warn\" = \"warn\",\r\n    \"error\" = \"error\"\r\n}\r\n\r\n/**\r\n * 异步日志返回类型\r\n */\r\nexport type PromiseType = Promise<void> | Promise<unknown>\r\n\r\n/**\r\n * 日志记录器接口\r\n */\r\nexport interface LogRecorderType {\r\n    /**\r\n     * 一般日志\r\n     */\r\n    info(content: any, option: AnyKeyValueType): void\r\n    /**\r\n     * 一般日志（异步）\r\n     */\r\n    infoAsync(content: any, option: AnyKeyValueType): PromiseType\r\n    /**\r\n     * 警告日志\r\n     */\r\n    warn(content: any, option: AnyKeyValueType): void\r\n    /**\r\n     * 警告日志（异步）\r\n     */\r\n    warnAsync(content: any, option: AnyKeyValueType): PromiseType\r\n    /**\r\n     * 错误日志\r\n     */\r\n    error(content: any, option: AnyKeyValueType): void\r\n    /**\r\n     * 错误日志（异步）\r\n     */\r\n    errorAsync(content: any, option: AnyKeyValueType): PromiseType\r\n}\r\n\r\nclass DefaultLogRecorderClass {\r\n    info(content: any, option: AnyKeyValueType) {\r\n        console.info(content, option)\r\n    }\r\n    infoAsync(content: any, option: AnyKeyValueType) {\r\n        console.info(content, option)\r\n        return Promise.resolve()\r\n    }\r\n    warn(content: any, option: AnyKeyValueType) {\r\n        console.warn(content, option)\r\n    }\r\n    warnAsync(content: any, option: AnyKeyValueType) {\r\n        console.warn(content, option)\r\n        return Promise.resolve()\r\n    }\r\n    error(content: any, option: AnyKeyValueType) {\r\n        console.error(content, option)\r\n    }\r\n    errorAsync(content: any, option: AnyKeyValueType) {\r\n        console.error(content, option)\r\n        return Promise.resolve()\r\n    }\r\n}\r\n\r\n/**\r\n * 当前默认的日志记录器（默认为window.console）\r\n */\r\nlet defaultLogRecorder: LogRecorderType = new DefaultLogRecorderClass()\r\n\r\n/**\r\n * 根据日志级别返回对应的日志记录函数\r\n */\r\nfunction getLogRecorder(level: LevelTypeEnum, isAsync: boolean): (obj: any, option: AnyKeyValueType) => void | ((obj: any, option: AnyKeyValueType) => PromiseType) {\r\n    if (isAsync) {\r\n        let fun = defaultLogRecorder.infoAsync\r\n        switch (level) {\r\n            case LevelTypeEnum.info:\r\n                fun = defaultLogRecorder.infoAsync\r\n                break\r\n            case LevelTypeEnum.warn:\r\n                fun = defaultLogRecorder.warnAsync\r\n                break\r\n            case LevelTypeEnum.error:\r\n                fun = defaultLogRecorder.errorAsync\r\n                break\r\n        }\r\n        return fun as any\r\n    }\r\n    let fun = defaultLogRecorder.info\r\n    switch (level) {\r\n        case LevelTypeEnum.info:\r\n            fun = defaultLogRecorder.info\r\n            break\r\n        case LevelTypeEnum.warn:\r\n            fun = defaultLogRecorder.warn\r\n            break\r\n        case LevelTypeEnum.error:\r\n            fun = defaultLogRecorder.error\r\n            break\r\n    }\r\n    return fun as any\r\n}\r\n\r\nclass LoggerHelper {\r\n    /**\r\n     * 写日志\r\n     * @param level 日志级别\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    write(level: LevelTypeEnum, content: any, option: AnyKeyValueType = {}) {\r\n        const logFunc = getLogRecorder(level, false)\r\n        logFunc(content, option)\r\n    }\r\n    /**\r\n     * 写日志（异步）\r\n     * @param level 日志级别\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    writeAsync(level: LevelTypeEnum, content: any, option: AnyKeyValueType = {}) {\r\n        const logFunc = getLogRecorder(level, true)\r\n        return <PromiseType>(logFunc(content, option) as any)\r\n    }\r\n    /**\r\n     *  写一般日志\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    info(content: any, option: AnyKeyValueType = {}) {\r\n        this.write(LevelTypeEnum.info, content, option)\r\n    }\r\n    /**\r\n     *  写一般日志（异步）\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    infoAsync(content: any, option: AnyKeyValueType = {}) {\r\n        return this.writeAsync(LevelTypeEnum.info, content, option)\r\n    }\r\n    /**\r\n     *  写警告日志\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    warn(content: any, option: AnyKeyValueType = {}) {\r\n        this.write(LevelTypeEnum.warn, content, option)\r\n    }\r\n    /**\r\n     *  写警告日志（异步）\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    warnAsync(content: any, option: AnyKeyValueType = {}) {\r\n        return this.writeAsync(LevelTypeEnum.warn, content, option)\r\n    }\r\n    /**\r\n     *  写错误日志\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    error(content: any, option: AnyKeyValueType = {}) {\r\n        this.write(LevelTypeEnum.error, content, option)\r\n    }\r\n    /**\r\n     *  写错误日志（异步）\r\n     * @param content 日志内容\r\n     * @param option 自定义选项\r\n     */\r\n    errorAsync(content: any, option: AnyKeyValueType = {}) {\r\n        return this.writeAsync(LevelTypeEnum.error, content, option)\r\n    }\r\n}\r\n\r\n/**\r\n * 当前日志工具类，把类型为【信息、警告、错误】的日志统一起来。\r\n * 默认的记录器为全局的console，也可以自定义日志记录器，只需要实现相应的接口即可。\r\n */\r\nexport const logger: LoggerHelper = new LoggerHelper()\r\n\r\n/**\r\n * 重新设置默认的日志记录器\r\n * @param logRecorder 新的日志记录器（默认的日志记录器为window.console）\r\n */\r\nexport function setLoggerRecorder(logRecorder: LogRecorderType) {\r\n    defaultLogRecorder = logRecorder\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as common from \"./common\"\r\nimport * as recorder from \"./recorder\"\r\n\r\nexport default {\r\n    /**\r\n     * 公共相关配置\r\n     */\r\n    common,\r\n    /**\r\n     * 记录器相关配置\r\n     */\r\n    recorder\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as regexConst from \"./regex\"\r\nimport * as map from \"./map\"\r\n\r\nexport default {\r\n    /**\r\n     * 正则常量\r\n     */\r\n    regexConst,\r\n    /**\r\n     * key/value常量\r\n     */\r\n    map\r\n}\r\n","import { isNumber, isDate } from \"../common/data\"\r\n\r\n/**\r\n * 将分钟数转为带小时的字符串，如：10小时20分钟\r\n */\r\nexport function toHourStringFromMins(mins: number): string {\r\n    if (mins < 0) {\r\n        return \"\"\r\n    }\r\n    if (mins == 0) {\r\n        return \"0分钟\"\r\n    }\r\n    const h = parseInt((mins / 60).toString())\r\n    const m = parseInt((mins % 60).toString())\r\n    const s = []\r\n    if (h > 0) {\r\n        s.push(`${h}小时`)\r\n    }\r\n    if (m > 0) {\r\n        s.push(`${m}分钟`)\r\n    }\r\n    return s.join(\"\")\r\n}\r\n\r\n/**\r\n * 将Date对象转换为指定的格式字符串\r\n * 注：月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\r\n * @param dateValue 日期对象\r\n * @param fmtStr 格式（默认值为yyyy-MM-dd），如：yyyy-MM-dd\r\n * @returns 格式化后的字符串\r\n */\r\nexport function format(dateValue: Date | number, fmtStr: string = \"yyyy-MM-dd\") {\r\n    let fmt = fmtStr\r\n    let dt: Date = dateValue as Date\r\n    if (isNumber(dateValue as any)) {\r\n        dt = new Date(dateValue)\r\n    }\r\n    if (!isDate(dt)) {\r\n        return \"\"\r\n    }\r\n    const o: any = {\r\n        \"M+\": dt.getMonth() + 1, //月份\r\n        \"d+\": dt.getDate(), //日\r\n        \"h+\": dt.getHours(), //小时\r\n        \"m+\": dt.getMinutes(), //分\r\n        \"s+\": dt.getSeconds(), //秒\r\n        \"q+\": Math.floor((dt.getMonth() + 3) / 3), //季度\r\n        S: dt.getMilliseconds() //毫秒\r\n    }\r\n    if (/(y+)/.test(fmt)) {\r\n        fmt = fmt.replace(RegExp.$1, (dt.getFullYear() + \"\").substr(4 - RegExp.$1.length))\r\n    }\r\n    for (const k in o) {\r\n        if (new RegExp(\"(\" + k + \")\").test(fmt)) {\r\n            fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length))\r\n        }\r\n    }\r\n    return fmt\r\n}\r\n","import { DateTimeCounterEntityType, DateTimeEntityType, MonthValueType, WeekValueType } from \"../declaration/date\"\r\nimport { isDate, isString } from \"../common/data\"\r\nimport { toInt } from \"../common/convert\"\r\n\r\n/**\r\n * 一年的毫秒数（按360天计算）\r\n */\r\nconst msPerYear = 31104000000\r\n/**\r\n * 一个月的毫秒数（按30天计算）\r\n */\r\nconst msPerMonth = 2592000000\r\n/**\r\n * 一天的毫秒数\r\n */\r\nconst msPerDay = 86400000\r\n/**\r\n * 一小时的毫秒数\r\n */\r\nconst msPerHour = 3600000\r\n/**\r\n * 一分钟的毫秒数\r\n */\r\nconst msPerMin = 60000\r\n/**\r\n * 一秒钟的毫秒数\r\n */\r\nconst msPerSec = 1000\r\n\r\n/**\r\n * 返回时间实体对象\r\n */\r\nexport function toEntity(dt: Date): DateTimeEntityType {\r\n    const model = {} as DateTimeEntityType\r\n    model.year = dt.getFullYear()\r\n    model.month = (dt.getMonth() + 1) as MonthValueType\r\n    model.day = dt.getDate()\r\n    model.hour = dt.getHours()\r\n    model.min = dt.getMinutes()\r\n    model.second = dt.getSeconds()\r\n    model.millisecond = dt.getMilliseconds()\r\n    model.week = dt.getDay() as WeekValueType\r\n    return model\r\n}\r\n\r\n/**\r\n * 根据毫秒数返回用于计时统计的实体\r\n */\r\nexport function toCounterEntity(ms: number): DateTimeCounterEntityType {\r\n    const model = {} as DateTimeCounterEntityType\r\n    model.year = 0\r\n    model.month = 0\r\n    model.day = 0\r\n    model.hour = 0\r\n    model.min = 0\r\n    model.second = 0\r\n    model.millisecond = 0\r\n\r\n    if (ms <= 0) {\r\n        return model\r\n    }\r\n\r\n    if (ms >= msPerYear) {\r\n        model.year = toInt(ms / msPerYear)\r\n    }\r\n    if (ms >= msPerMonth) {\r\n        model.month = toInt((ms % msPerYear) / msPerMonth)\r\n    }\r\n    if (ms >= msPerDay) {\r\n        model.day = toInt(((ms % msPerYear) % msPerMonth) / msPerDay)\r\n    }\r\n    if (ms >= msPerHour) {\r\n        model.hour = toInt((((ms % msPerYear) % msPerMonth) % msPerDay) / msPerHour)\r\n    }\r\n    if (ms >= msPerMin) {\r\n        model.min = toInt(((((ms % msPerYear) % msPerMonth) % msPerDay) % msPerHour) / msPerMin)\r\n    }\r\n    if (ms >= msPerSec) {\r\n        model.second = toInt((((((ms % msPerYear) % msPerMonth) % msPerDay) % msPerHour) % msPerMin) / msPerSec)\r\n    }\r\n    model.millisecond = toInt((((((ms % msPerYear) % msPerMonth) % msPerDay) % msPerHour) % msPerMin) % msPerSec)\r\n    return model\r\n}\r\n\r\n/**\r\n * 将字符串\"/Date(...)/\"的日期转为js Date对象\r\n * @param dateStr date字符串，如\"/Date(1441036800000)/\"\r\n * @returns 如果转换成功，则返回Date对象，否则返回null\r\n */\r\nexport function parse(dateStr: string): Date | null {\r\n    if (!dateStr || !isString(dateStr)) {\r\n        return null\r\n    }\r\n    let date = null\r\n    const mts = dateStr.match(/(\\/Date\\((\\d+)\\)\\/)/)\r\n    if (mts && mts.length >= 3) {\r\n        date = new Date(parseInt(mts[2]))\r\n    }\r\n    if (!isDate(date)) {\r\n        return null\r\n    }\r\n    return date\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as format from \"./format\"\r\nimport * as convert from \"./convert\"\r\n\r\nexport default {\r\n    /**\r\n     * 格式化相关\r\n     */\r\n    format,\r\n    /**\r\n     * 转换相关\r\n     */\r\n    convert\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as common from \"./common\"\r\nimport * as date from \"./date\"\r\n\r\nexport default {\r\n    common,\r\n    date\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as browser from \"./browser\"\r\n\r\nexport default {\r\n    /**\r\n     * 浏览器相关\r\n     */\r\n    browser\r\n}\r\n","/**\r\n * 下拉框实体\r\n */\r\nexport class SelectItem<ValueType, ExtendType> {\r\n    constructor(text: string, value: ValueType, isSelected: boolean = false, extend?: ExtendType) {\r\n        this.text = text\r\n        this.value = value\r\n        this.isSelected = isSelected\r\n        this.extend = extend\r\n    }\r\n    /**\r\n     * 文本名\r\n     */\r\n    text: string = \"\"\r\n    /**\r\n     * 是否已选中\r\n     */\r\n    isSelected = false\r\n    /**\r\n     * value值\r\n     */\r\n    value: ValueType\r\n    /**\r\n     * 扩展属性\r\n     */\r\n    extend?: ExtendType\r\n}","/**\r\n * 序列化基类（解决getter的JSON.stringify无效的问题）\r\n */\r\nexport class BaseClass {\r\n    toJSON() {\r\n        const jsonObj = { ...this } as any\r\n        const proto = Object.getPrototypeOf(this)\r\n        for (const key of Object.getOwnPropertyNames(proto)) {\r\n            const desc = Object.getOwnPropertyDescriptor(proto, key)\r\n            const hasGetter = desc && typeof desc.get === 'function'\r\n            if (hasGetter) {\r\n                jsonObj[key] = (this as any)[key]\r\n            }\r\n        }\r\n        return jsonObj\r\n    }\r\n}","import { document, globalObject } from \"../common/lib\"\r\nimport { AnyKeyValueType } from \"../declaration/common\"\r\n\r\n/**\r\n * key 的枚举值\r\n */\r\nenum KeyTypeEnum {\r\n    /**\r\n     * 记录属性值\r\n     */\r\n    val = \"val\",\r\n    /**\r\n     * 记录innerText\r\n     */\r\n    txt = \"txt\",\r\n    /**\r\n     * 记录innerHTML\r\n     */\r\n    html = \"html\",\r\n    /**\r\n     * 记录次数\r\n     */\r\n    count = \"count\"\r\n}\r\n\r\n\r\n/**\r\n * DOM数据收集记录器类。用于批量收集DOM元素的属性信息，并将这些属性内容存放到一个对象中。jskit-key 属性必须要指定。\r\n * 示例：<div jskit-key=\"name\" jskit-type=\"val\" jskit-val=\"test\"></div>，则最终会把【name】与【test】保存到一个对象中。\r\n * 具体说明：\r\n * 1：如果此DOM的 jskit-type=\"val\"，则会记录属性 jskit-val 的值（这种情况，jskit-type 可以省略不用指定）\r\n * 2：如果此DOM的 jskit-type=\"txt\"，则会记录该DOM的innerText\r\n * 3：如果此DOM的 jskit-type=\"html\"，则会记录该DOM的innerHTML\r\n * 4：如果此DOM的 jskit-type=\"count\"，则会记录与该DOM相同【jskit-key】的DOM元素的出现次数\r\n * 5：如果此DOM只有 jskit-key 属性，则会默认记录一个标记为\"1\"\r\n */\r\nexport class DOMDataRecorder {\r\n    /**\r\n     * 当前url地址\r\n     */\r\n    url: string = \"\"\r\n    /**\r\n     * 来源url地址\r\n     */\r\n    refer: string = \"\"\r\n    /**\r\n     * 数据标识\r\n     */\r\n    id: string = \"\"\r\n    /**\r\n     * DOM元素属性前缀，默认为：jskit-\r\n     */\r\n    attrPrefix = \"jskit-\"\r\n    /**\r\n     * 数据值（键值对的形式）\r\n     */\r\n    readonly value: { [name: string]: string[] | number } = {}\r\n    /**\r\n     * 扩展自定义数据\r\n     */\r\n    extend: AnyKeyValueType | undefined = undefined\r\n    /**\r\n     * 初始化\r\n     */\r\n    init() {\r\n        //环境校验\r\n        if (!document) {\r\n            throw new Error(\"Document is not found!\")\r\n        }\r\n        //基本属性\r\n        const win = globalObject as Window\r\n        this.url = win.location.href\r\n        this.refer = document.referrer\r\n        //数据\r\n        const attrKeyName = `${this.attrPrefix}key`\r\n        const attrTypeName = `${this.attrPrefix}type`\r\n        const attrValueName = `${this.attrPrefix}val`\r\n        const eles = Array.from(document.querySelectorAll(`[${attrKeyName}]`))\r\n        if (!eles || !eles.length) {\r\n            return this\r\n        }\r\n        eles.forEach(node => {\r\n            const key = (node.getAttribute(attrKeyName) || \"\").toLowerCase().trim()\r\n            if (!key) {\r\n                return\r\n            }\r\n            const type = (node.getAttribute(attrTypeName) || \"\").toLowerCase().trim()\r\n\r\n            //初始化\r\n            if (type == KeyTypeEnum.count) {\r\n                if (!this.value[key]) {\r\n                    this.value[key] = 0\r\n                }\r\n            } else {\r\n                this.value[key] = this.value[key] || []\r\n            }\r\n\r\n            //如果存在jskit-val属性，则记录此属性值\r\n            if (node.hasAttribute(attrValueName)) {\r\n                (this.value[key] as string[]).push((node.getAttribute(attrValueName) || \"\").trim())\r\n                return\r\n            }\r\n            //记录此节点的innerText值\r\n            if (type == KeyTypeEnum.txt) {\r\n                (this.value[key] as string[]).push(((node as HTMLElement).innerText || \"\").trim())\r\n                return\r\n            }\r\n            //记录此节点的innerHTML值\r\n            if (type == KeyTypeEnum.html) {\r\n                (this.value[key] as string[]).push(((node as HTMLElement).innerHTML || \"\").trim())\r\n                return\r\n            }\r\n            //统计这些属性元素的个数\r\n            if (type == KeyTypeEnum.count) {\r\n                (this.value[key] as number) = (this.value[key] as number) + 1\r\n                return\r\n            }\r\n            //如果不存在其它属性，则直接记录一个标记\r\n            (this.value[key] as string[]).push(\"1\")\r\n        })\r\n        return this\r\n    }\r\n}","/**\r\n * 消息头\r\n */\r\nclass MessageHead {\r\n    /**\r\n     * 是否响应\r\n     */\r\n    isAck: boolean = true\r\n    /**\r\n     * 时间\r\n     */\r\n    date: number = new Date().valueOf()\r\n    /**\r\n     * 消息是否成功\r\n     */\r\n    isSuccess: boolean = true\r\n    /**\r\n     * 是否为异常\r\n     */\r\n    isException: boolean = false\r\n    /**\r\n     * 提示语\r\n     */\r\n    message: string = \"\"\r\n    /**\r\n     * 提示语的详细信息\r\n     */\r\n    messageMore: string = \"\"\r\n    /**\r\n     * 需要跳转的url地址\r\n     */\r\n    redirectURL: string = \"\"\r\n    /**\r\n     * 是否需要刷新当前页面\r\n     */\r\n    isRefresh: boolean = false\r\n    /**\r\n     * 错误码\r\n     */\r\n    errorCode: string = \"\"\r\n}\r\n\r\n/**\r\n * 消息正文\r\n */\r\nclass MessageBody<T1, T2> {\r\n    /**\r\n     * 数据\r\n     */\r\n    data: T1 = null as any\r\n    /**\r\n     * 扩展数据\r\n     */\r\n    extendData: T2 = null as any\r\n}\r\n\r\n\r\n/**\r\n * 消息实体\r\n */\r\nexport class MessageEntity<BodyDataType = any, BodyExtendDataType = any> {\r\n    /**\r\n     * 头信息\r\n     */\r\n    head: MessageHead = new MessageHead()\r\n    /**\r\n     * 正文信息\r\n     */\r\n    body: MessageBody<BodyDataType, BodyExtendDataType> = new MessageBody<BodyDataType, BodyExtendDataType>()\r\n}\r\n\r\n","/* eslint-disable import/no-default-export */\r\nimport * as idCard from \"./idCard\"\r\nimport * as keyValue from \"./keyValue\"\r\nimport * as select from \"./select\"\r\nimport * as serialize from \"./serialize\"\r\nimport * as message from \"./message\"\r\nimport * as methodResult from \"./method-result\"\r\n\r\nexport default {\r\n    /**\r\n     * 证件实体\r\n     */\r\n    idCard,\r\n    /**\r\n     * key/value实体\r\n     */\r\n    keyValue,\r\n    /**\r\n     * 下拉框相关实体\r\n     */\r\n    select,\r\n    /**\r\n     * 序列化相关\r\n     */\r\n    serialize,\r\n    /**\r\n     * 消息提示实体\r\n     */\r\n    message,\r\n    /**\r\n     * 方法结果实体\r\n     */\r\n    methodResult\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as log from \"./log\"\r\nimport * as dom from \"./dom\"\r\n\r\nexport default {\r\n    log,\r\n    dom\r\n}\r\n","/* eslint-disable react/static-property-placement */\r\n/**\r\n * 策略项\r\n */\r\nexport class StrategyItem<ContextType> {\r\n    constructor(name: string, context: ContextType, handler: (item: StrategyItem<ContextType>) => void) {\r\n        this.name = name\r\n        this.context = context\r\n        this.handler = handler\r\n    }\r\n    name: string = \"\"\r\n    context: ContextType\r\n    handler: (item: StrategyItem<ContextType>) => void\r\n}\r\n\r\n/**\r\n * 策略管理类，用于一次性执行多次策略方法。\r\n * 使用方法：const strategy = new Strategy()\r\n * strategy.add(item => {...}).add(item => {...}).add(item => {...}).execute()\r\n */\r\nexport class Strategy<ContextType = any> {\r\n    /**\r\n     * 策略列表\r\n     */\r\n    private _strategyList: StrategyItem<ContextType>[] = []\r\n    /**\r\n     * 上下文，用于多个策略之间的数据共享\r\n     */\r\n    context: ContextType = null as any\r\n    /**\r\n     * 添加一个策略项\r\n     */\r\n    add(handler: (item: StrategyItem<ContextType>) => void, name: string = \"\") {\r\n        this._strategyList.push(new StrategyItem(name, this.context, handler))\r\n        return this\r\n    }\r\n    /**\r\n     * 执行策略列表\r\n     */\r\n    execute() {\r\n        this._strategyList.forEach((item) => {\r\n            item.handler(item)\r\n        })\r\n    }\r\n}\r\n","import { getSymbol } from \"../common/lib\"\r\n\r\nconst classIdSymbol = getSymbol(\"class-id\")\r\n\r\n/**\r\n * 获取指定类的单个实例\r\n * @param className 类的名字\r\n */\r\nexport function getInstance<T>(ClassName: new () => T): T {\r\n    if (!classIdSymbol) {\r\n        throw new Error(\"Type of Symbol is not found!\")\r\n    }\r\n    const obj = (ClassName as any)[classIdSymbol] as T\r\n    if (typeof (obj) != 'undefined') {\r\n        return obj\r\n    }\r\n    const newObj = new ClassName()\r\n    Object.defineProperty(ClassName, classIdSymbol, {\r\n        value: newObj\r\n    })\r\n    return newObj\r\n}","/* eslint-disable import/no-default-export */\r\nimport * as strategy from \"./strategy\"\r\nimport * as singleton from \"./singleton\"\r\n\r\nexport default {\r\n    /**\r\n     * 策略模式\r\n     */\r\n    strategy,\r\n    /**\r\n     * 单例模式\r\n     */\r\n    singleton\r\n}\r\n","/* eslint-disable import/no-default-export */\r\n/**\r\n * 定时器，提供开始计时与结束计时方法，最终会计算出这两个时间的差。\r\n */\r\nexport default class StopWatch {\r\n    private _date = new Date()\r\n    private _value = 0\r\n    private _startFlag = false\r\n    private _stopFlag = false\r\n    /**\r\n     * 间隔的毫秒数\r\n     */\r\n    get value() {\r\n        return this._value\r\n    }\r\n    /**\r\n     * 开始计时\r\n     */\r\n    start() {\r\n        if (this._startFlag || this._stopFlag) {\r\n            throw new Error(\"You cannot call 'start' because this object has been started or stopt!\")\r\n        }\r\n        this._startFlag = true\r\n        this._date = new Date()\r\n        return this\r\n    }\r\n    /**\r\n     * 停止计时\r\n     */\r\n    stop() {\r\n        if (this._stopFlag) {\r\n            throw new Error(\"You cannot call 'stop' because this object has been stopt!\")\r\n        }\r\n        this._stopFlag = true\r\n        this._value = new Date().valueOf() - this._date.valueOf()\r\n        return this\r\n    }\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport stopWatch from \"./stopWatch\"\r\n\r\nexport default {\r\n    /**\r\n     * 计时器（请使用大写字母开头的）\r\n     */\r\n    stopWatch,\r\n    /**\r\n     * 计时器\r\n     */\r\n    StopWatch: stopWatch\r\n}\r\n","import { BaseClass } from \"../entity/serialize\"\r\n\r\nexport interface ValidationInitOpsType<ExtendType> {\r\n    /**\r\n     * 是否显示所有提示语\r\n     */\r\n    isShowAll?: boolean\r\n    /**\r\n     * 上一次的字段提示对象（主要用于初始化时合并对象）\r\n     */\r\n    oldItem?: FieldMessageItem<ExtendType>\r\n    /**\r\n     * 需要显示提示语的字段\r\n     */\r\n    needShowFields?: string[]\r\n    /**\r\n     * 不需要显示提示语的字段\r\n     */\r\n    unNeedShowFields?: string[]\r\n}\r\n\r\nexport interface FieldItemType {\r\n    /**\r\n     * 提示语\r\n     */\r\n    msg: string\r\n    /**\r\n     * 是否显示\r\n     */\r\n    isShow: boolean\r\n}\r\n\r\n/**\r\n * 每一项的具体提示类\r\n */\r\nexport class FieldMessageItem<ExtendType = any> {\r\n    /**\r\n     * 唯一id标识\r\n     */\r\n    id: string = \"\"\r\n    /**\r\n     * 是否验证通过\r\n     */\r\n    isPassed: boolean = true\r\n    /**\r\n     * 需要验证的具体字段信息\r\n     */\r\n    fieldItems: { [name: string]: FieldItemType } = {}\r\n    /**\r\n     * 扩展字段\r\n     */\r\n    extend: ExtendType = undefined as any\r\n    /**\r\n     * 初始化，重新设置fieldItems中的属性\r\n     */\r\n    init(ops: ValidationInitOpsType<ExtendType>) {\r\n        if (!ops) {\r\n            return this\r\n        }\r\n        Object.keys(this.fieldItems).forEach((k) => {\r\n            //如果isShowAll有值，则将所有字段的isShow设置为该值\r\n            if (ops && typeof ops.isShowAll == \"boolean\") {\r\n                this.fieldItems[k].isShow = ops.isShowAll\r\n                return\r\n            }\r\n            //如果原有的验证对象中的字段：【needShowFields包含该字段时，则isShow设置为true】，【unNeedShowFields包含该字段时，则isShow设置为false】\r\n            let oldShowValue = !!(ops.oldItem && ops.oldItem.fieldItems[k].isShow)\r\n            if ((ops.needShowFields || []).includes(k)) {\r\n                oldShowValue = true\r\n            }\r\n            if ((ops.unNeedShowFields || []).includes(k)) {\r\n                oldShowValue = false\r\n            }\r\n            this.fieldItems[k].isShow = oldShowValue\r\n        })\r\n        return this\r\n    }\r\n}\r\n\r\n/**\r\n * 字段信息提示实体类。把类似“表单验证”的场景通过一个统一的实体类来表现，方便js代码去读取与管理这些状态与信息。\r\n * 比如：如果一个输入项校验不通过，会涉及到这些数据的变化：是否验证通过、错误提示消息、是否只显示当前这一个错误消息等、是否需要清空其它错误消息等。\r\n * 示例用法：\r\n * const model = new FieldMessageModel()\r\n * model.itemList = []\r\n * const item = new FieldMessageItem()\r\n * item.isPassed = false\r\n * item.fieldItems = {\r\n * name: {\r\n *     isShow: false,\r\n *     msg: \"\"\r\n * }\r\n * 当数据化生变化时，要做的只是更新这个对象中的具体字段状态即可，业务代码中根据这些状态信息统一去显示页面。\r\n *\r\n*}\r\nmodel.itemList.push(item)\r\n *\r\n */\r\nexport class FieldMessageModel<ExtendType = any> extends BaseClass {\r\n    /**\r\n     * 是否itemList中的所有的字段提示列表均已验证通过\r\n     */\r\n    get isPassed(): boolean {\r\n        return isPassed(this)\r\n    }\r\n    /**\r\n     * 字段提示列表\r\n     */\r\n    itemList: FieldMessageItem<ExtendType>[] = []\r\n    /**\r\n     * 根据id返回指定的字段提示项\r\n     */\r\n    getItem(id: string): FieldMessageItem<ExtendType> | null {\r\n        return getItem(this, id)\r\n    }\r\n    toJSON() {\r\n        return {\r\n            isPassed: this.isPassed,\r\n            itemList: this.itemList\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 判断FieldMessageModel是否验证通过\r\n */\r\nexport function isPassed<ExtendType>(model: FieldMessageModel<ExtendType>) {\r\n    if (!model.itemList.length) {\r\n        return true\r\n    }\r\n    return !model.itemList.find((k) => !k.isPassed)\r\n}\r\n\r\n/**\r\n * 根据id返回FieldMessageModel中对应的FieldMessageItem\r\n */\r\nexport function getItem<ExtendType>(model: FieldMessageModel<ExtendType>, id: string): FieldMessageItem<ExtendType> | null {\r\n    return model.itemList.find((k) => k.id == id) || null\r\n}\r\n","/**\r\n * 获取文件名（包含扩展名），如：c:\\1\\2\\3.txt => 3.txt\r\n */\r\nexport function getFileName(path: string): string {\r\n    if (!path) {\r\n        return \"\"\r\n    }\r\n    const str = path.replace(/\\//g, \"\\\\\")\r\n    const splitIndex = str.lastIndexOf(\"\\\\\")\r\n    if (splitIndex < 0) {\r\n        return path.trim()\r\n    }\r\n    return str.substr(splitIndex + 1).trim()\r\n}\r\n\r\n/**\r\n * 获取文件名（不包含扩展名），如：c:\\1\\2\\3.txt => 3\r\n */\r\nexport function getFileNameWithoutExt(path: string): string {\r\n    const fileName = getFileName(path)\r\n    if (!fileName) {\r\n        return \"\"\r\n    }\r\n    const dotIndex = fileName.lastIndexOf(\".\")\r\n    if (dotIndex < 0) {\r\n        return fileName\r\n    }\r\n    return fileName.substr(0, dotIndex)\r\n}\r\n\r\n/**\r\n * 获取扩展名（包含点）\r\n */\r\nexport function getExt(path: string): string {\r\n    const fileName = getFileName(path)\r\n    if (!fileName) {\r\n        return \"\"\r\n    }\r\n    const dotIndex = fileName.lastIndexOf(\".\")\r\n    if (dotIndex < 0) {\r\n        return \"\"\r\n    }\r\n    return fileName.substr(dotIndex)\r\n}\r\n\r\n/**\r\n * 获取扩展名（不包含点）\r\n */\r\nexport function getExtWithoutDot(path: string): string {\r\n    const fileName = getFileName(path)\r\n    if (!fileName) {\r\n        return \"\"\r\n    }\r\n    const dotIndex = fileName.lastIndexOf(\".\")\r\n    if (dotIndex < 0) {\r\n        return \"\"\r\n    }\r\n    return fileName.substr(dotIndex + 1)\r\n}\r\n","import * as path from \"./path\"\r\n\r\nexport default { path }\r\n","/* eslint-disable import/no-default-export */\r\nimport cache from \"./cache/index\"\r\nimport check from \"./check/index\"\r\nimport common from \"./common/index\"\r\nimport config from \"./config/index\"\r\nimport constant from \"./constant/index\"\r\nimport date from \"./date/index\"\r\nimport declaration from \"./declaration/index\"\r\nimport device from \"./device/index\"\r\nimport entity from \"./entity/index\"\r\nimport recorder from \"./recorder/index\"\r\nimport pattern from \"./pattern/index\"\r\nimport timer from \"./timer/index\"\r\nimport validation from \"./validation/index\"\r\nimport file from \"./file/index\"\r\n\r\nexport default {\r\n    cache,\r\n    check,\r\n    common,\r\n    config,\r\n    constant,\r\n    date,\r\n    declaration,\r\n    device,\r\n    entity,\r\n    recorder,\r\n    pattern,\r\n    timer,\r\n    validation,\r\n    file\r\n}\r\n","/* eslint-disable import/no-default-export */\r\nimport * as fieldMessage from \"./fieldMessage\"\r\n\r\nexport default {\r\n    /**\r\n     * 带提示信息的字段显示与隐藏\r\n     */\r\n    fieldMessage\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };\n\t__webpack_require__.i.forEach(function(handler) { handler(execOptions); });\n\tmodule = execOptions.module;\n\texecOptions.factory.call(module.exports, module, module.exports, execOptions.require);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n// expose the module execution interceptor\n__webpack_require__.i = [];\n\n","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(9831);\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var currentModuleData = {};\nvar installedModules = __webpack_require__.c;\n\n// module and require creation\nvar currentChildModule;\nvar currentParents = [];\n\n// status\nvar registeredStatusHandlers = [];\nvar currentStatus = \"idle\";\n\n// while downloading\nvar blockingPromises;\n\n// The update info\nvar currentUpdateApplyHandlers;\nvar queuedInvalidatedModules;\n\n// eslint-disable-next-line no-unused-vars\n__webpack_require__.hmrD = currentModuleData;\n\n__webpack_require__.i.push(function (options) {\n\tvar module = options.module;\n\tvar require = createRequire(options.require, options.id);\n\tmodule.hot = createModuleHotObject(options.id, module);\n\tmodule.parents = currentParents;\n\tmodule.children = [];\n\tcurrentParents = [];\n\toptions.require = require;\n});\n\n__webpack_require__.hmrC = {};\n__webpack_require__.hmrI = {};\n\nfunction createRequire(require, moduleId) {\n\tvar me = installedModules[moduleId];\n\tif (!me) return require;\n\tvar fn = function (request) {\n\t\tif (me.hot.active) {\n\t\t\tif (installedModules[request]) {\n\t\t\t\tvar parents = installedModules[request].parents;\n\t\t\t\tif (parents.indexOf(moduleId) === -1) {\n\t\t\t\t\tparents.push(moduleId);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentParents = [moduleId];\n\t\t\t\tcurrentChildModule = request;\n\t\t\t}\n\t\t\tif (me.children.indexOf(request) === -1) {\n\t\t\t\tme.children.push(request);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t\"[HMR] unexpected require(\" +\n\t\t\t\t\trequest +\n\t\t\t\t\t\") from disposed module \" +\n\t\t\t\t\tmoduleId\n\t\t\t);\n\t\t\tcurrentParents = [];\n\t\t}\n\t\treturn require(request);\n\t};\n\tvar createPropertyDescriptor = function (name) {\n\t\treturn {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn require[name];\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\trequire[name] = value;\n\t\t\t}\n\t\t};\n\t};\n\tfor (var name in require) {\n\t\tif (Object.prototype.hasOwnProperty.call(require, name) && name !== \"e\") {\n\t\t\tObject.defineProperty(fn, name, createPropertyDescriptor(name));\n\t\t}\n\t}\n\tfn.e = function (chunkId) {\n\t\treturn trackBlockingPromise(require.e(chunkId));\n\t};\n\treturn fn;\n}\n\nfunction createModuleHotObject(moduleId, me) {\n\tvar hot = {\n\t\t// private stuff\n\t\t_acceptedDependencies: {},\n\t\t_declinedDependencies: {},\n\t\t_selfAccepted: false,\n\t\t_selfDeclined: false,\n\t\t_selfInvalidated: false,\n\t\t_disposeHandlers: [],\n\t\t_main: currentChildModule !== moduleId,\n\t\t_requireSelf: function () {\n\t\t\tcurrentParents = me.parents.slice();\n\t\t\tcurrentChildModule = moduleId;\n\t\t\t__webpack_require__(moduleId);\n\t\t},\n\n\t\t// Module API\n\t\tactive: true,\n\t\taccept: function (dep, callback) {\n\t\t\tif (dep === undefined) hot._selfAccepted = true;\n\t\t\telse if (typeof dep === \"function\") hot._selfAccepted = dep;\n\t\t\telse if (typeof dep === \"object\" && dep !== null)\n\t\t\t\tfor (var i = 0; i < dep.length; i++)\n\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback || function () {};\n\t\t\telse hot._acceptedDependencies[dep] = callback || function () {};\n\t\t},\n\t\tdecline: function (dep) {\n\t\t\tif (dep === undefined) hot._selfDeclined = true;\n\t\t\telse if (typeof dep === \"object\" && dep !== null)\n\t\t\t\tfor (var i = 0; i < dep.length; i++)\n\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\n\t\t\telse hot._declinedDependencies[dep] = true;\n\t\t},\n\t\tdispose: function (callback) {\n\t\t\thot._disposeHandlers.push(callback);\n\t\t},\n\t\taddDisposeHandler: function (callback) {\n\t\t\thot._disposeHandlers.push(callback);\n\t\t},\n\t\tremoveDisposeHandler: function (callback) {\n\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\n\t\t\tif (idx >= 0) hot._disposeHandlers.splice(idx, 1);\n\t\t},\n\t\tinvalidate: function () {\n\t\t\tthis._selfInvalidated = true;\n\t\t\tswitch (currentStatus) {\n\t\t\t\tcase \"idle\":\n\t\t\t\t\tcurrentUpdateApplyHandlers = [];\n\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\t\t\t\t__webpack_require__.hmrI[key](\n\t\t\t\t\t\t\tmoduleId,\n\t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tsetStatus(\"ready\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ready\":\n\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\t\t\t\t__webpack_require__.hmrI[key](\n\t\t\t\t\t\t\tmoduleId,\n\t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"prepare\":\n\t\t\t\tcase \"check\":\n\t\t\t\tcase \"dispose\":\n\t\t\t\tcase \"apply\":\n\t\t\t\t\t(queuedInvalidatedModules = queuedInvalidatedModules || []).push(\n\t\t\t\t\t\tmoduleId\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// ignore requests in error states\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\t// Management API\n\t\tcheck: hotCheck,\n\t\tapply: hotApply,\n\t\tstatus: function (l) {\n\t\t\tif (!l) return currentStatus;\n\t\t\tregisteredStatusHandlers.push(l);\n\t\t},\n\t\taddStatusHandler: function (l) {\n\t\t\tregisteredStatusHandlers.push(l);\n\t\t},\n\t\tremoveStatusHandler: function (l) {\n\t\t\tvar idx = registeredStatusHandlers.indexOf(l);\n\t\t\tif (idx >= 0) registeredStatusHandlers.splice(idx, 1);\n\t\t},\n\n\t\t//inherit from previous dispose call\n\t\tdata: currentModuleData[moduleId]\n\t};\n\tcurrentChildModule = undefined;\n\treturn hot;\n}\n\nfunction setStatus(newStatus) {\n\tcurrentStatus = newStatus;\n\tfor (var i = 0; i < registeredStatusHandlers.length; i++)\n\t\tregisteredStatusHandlers[i].call(null, newStatus);\n}\n\nfunction trackBlockingPromise(promise) {\n\tswitch (currentStatus) {\n\t\tcase \"ready\":\n\t\t\tsetStatus(\"prepare\");\n\t\t\tblockingPromises.push(promise);\n\t\t\twaitForBlockingPromises(function () {\n\t\t\t\tsetStatus(\"ready\");\n\t\t\t});\n\t\t\treturn promise;\n\t\tcase \"prepare\":\n\t\t\tblockingPromises.push(promise);\n\t\t\treturn promise;\n\t\tdefault:\n\t\t\treturn promise;\n\t}\n}\n\nfunction waitForBlockingPromises(fn) {\n\tif (blockingPromises.length === 0) return fn();\n\tvar blocker = blockingPromises;\n\tblockingPromises = [];\n\treturn Promise.all(blocker).then(function () {\n\t\treturn waitForBlockingPromises(fn);\n\t});\n}\n\nfunction hotCheck(applyOnUpdate) {\n\tif (currentStatus !== \"idle\") {\n\t\tthrow new Error(\"check() is only allowed in idle status\");\n\t}\n\tsetStatus(\"check\");\n\treturn __webpack_require__.hmrM().then(function (update) {\n\t\tif (!update) {\n\t\t\tsetStatus(applyInvalidatedModules() ? \"ready\" : \"idle\");\n\t\t\treturn null;\n\t\t}\n\n\t\tsetStatus(\"prepare\");\n\n\t\tvar updatedModules = [];\n\t\tblockingPromises = [];\n\t\tcurrentUpdateApplyHandlers = [];\n\n\t\treturn Promise.all(\n\t\t\tObject.keys(__webpack_require__.hmrC).reduce(function (\n\t\t\t\tpromises,\n\t\t\t\tkey\n\t\t\t) {\n\t\t\t\t__webpack_require__.hmrC[key](\n\t\t\t\t\tupdate.c,\n\t\t\t\t\tupdate.r,\n\t\t\t\t\tupdate.m,\n\t\t\t\t\tpromises,\n\t\t\t\t\tcurrentUpdateApplyHandlers,\n\t\t\t\t\tupdatedModules\n\t\t\t\t);\n\t\t\t\treturn promises;\n\t\t\t},\n\t\t\t[])\n\t\t).then(function () {\n\t\t\treturn waitForBlockingPromises(function () {\n\t\t\t\tif (applyOnUpdate) {\n\t\t\t\t\treturn internalApply(applyOnUpdate);\n\t\t\t\t} else {\n\t\t\t\t\tsetStatus(\"ready\");\n\n\t\t\t\t\treturn updatedModules;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction hotApply(options) {\n\tif (currentStatus !== \"ready\") {\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow new Error(\"apply() is only allowed in ready status\");\n\t\t});\n\t}\n\treturn internalApply(options);\n}\n\nfunction internalApply(options) {\n\toptions = options || {};\n\n\tapplyInvalidatedModules();\n\n\tvar results = currentUpdateApplyHandlers.map(function (handler) {\n\t\treturn handler(options);\n\t});\n\tcurrentUpdateApplyHandlers = undefined;\n\n\tvar errors = results\n\t\t.map(function (r) {\n\t\t\treturn r.error;\n\t\t})\n\t\t.filter(Boolean);\n\n\tif (errors.length > 0) {\n\t\tsetStatus(\"abort\");\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow errors[0];\n\t\t});\n\t}\n\n\t// Now in \"dispose\" phase\n\tsetStatus(\"dispose\");\n\n\tresults.forEach(function (result) {\n\t\tif (result.dispose) result.dispose();\n\t});\n\n\t// Now in \"apply\" phase\n\tsetStatus(\"apply\");\n\n\tvar error;\n\tvar reportError = function (err) {\n\t\tif (!error) error = err;\n\t};\n\n\tvar outdatedModules = [];\n\tresults.forEach(function (result) {\n\t\tif (result.apply) {\n\t\t\tvar modules = result.apply(reportError);\n\t\t\tif (modules) {\n\t\t\t\tfor (var i = 0; i < modules.length; i++) {\n\t\t\t\t\toutdatedModules.push(modules[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// handle errors in accept handlers and self accepted module load\n\tif (error) {\n\t\tsetStatus(\"fail\");\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow error;\n\t\t});\n\t}\n\n\tif (queuedInvalidatedModules) {\n\t\treturn internalApply(options).then(function (list) {\n\t\t\toutdatedModules.forEach(function (moduleId) {\n\t\t\t\tif (list.indexOf(moduleId) < 0) list.push(moduleId);\n\t\t\t});\n\t\t\treturn list;\n\t\t});\n\t}\n\n\tsetStatus(\"idle\");\n\treturn Promise.resolve(outdatedModules);\n}\n\nfunction applyInvalidatedModules() {\n\tif (queuedInvalidatedModules) {\n\t\tif (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];\n\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\tqueuedInvalidatedModules.forEach(function (moduleId) {\n\t\t\t\t__webpack_require__.hmrI[key](\n\t\t\t\t\tmoduleId,\n\t\t\t\t\tcurrentUpdateApplyHandlers\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t\tqueuedInvalidatedModules = undefined;\n\t\treturn true;\n\t}\n}"],"sourceRoot":""}